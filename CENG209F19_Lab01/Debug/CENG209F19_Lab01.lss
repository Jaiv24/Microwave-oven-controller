
AVRASM ver. 2.2.7  H:\CNEG209\Labs\CENG209F19_Lab01\CENG209F19_Lab01\main.asm Mon Nov 25 16:45:20 2019

[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.2.209\avrasm\inc\m328pdef.inc'
H:\CNEG209\Labs\CENG209F19_Lab01\CENG209F19_Lab01\main.asm(59): Including file 'H:\CNEG209\Labs\CENG209F19_Lab01\CENG209F19_Lab01\iopins.asm'
H:\CNEG209\Labs\CENG209F19_Lab01\CENG209F19_Lab01\main.asm(60): Including file 'H:\CNEG209\Labs\CENG209F19_Lab01\CENG209F19_Lab01\util.asm'
H:\CNEG209\Labs\CENG209F19_Lab01\CENG209F19_Lab01\main.asm(61): Including file 'H:\CNEG209\Labs\CENG209F19_Lab01\CENG209F19_Lab01\serialio.asm'
H:\CNEG209\Labs\CENG209F19_Lab01\CENG209F19_Lab01\main.asm(62): Including file 'H:\CNEG209\Labs\CENG209F19_Lab01\CENG209F19_Lab01\adc.asm'
H:\CNEG209\Labs\CENG209F19_Lab01\CENG209F19_Lab01\main.asm(63): Including file 'H:\CNEG209\Labs\CENG209F19_Lab01\CENG209F19_Lab01\i2c.asm'
H:\CNEG209\Labs\CENG209F19_Lab01\CENG209F19_Lab01\main.asm(64): Including file 'H:\CNEG209\Labs\CENG209F19_Lab01\CENG209F19_Lab01\rtcds1307.asm'
H:\CNEG209\Labs\CENG209F19_Lab01\CENG209F19_Lab01\main.asm(65): Including file 'H:\CNEG209\Labs\CENG209F19_Lab01\CENG209F19_Lab01\andisplay.asm'
[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.2.209\avrasm\inc\m328pdef.inc'
H:\CNEG209\Labs\CENG209F19_Lab01\CENG209F19_Lab01\main.asm(59): Including file 'H:\CNEG209\Labs\CENG209F19_Lab01\CENG209F19_Lab01\iopins.asm'
H:\CNEG209\Labs\CENG209F19_Lab01\CENG209F19_Lab01\main.asm(60): Including file 'H:\CNEG209\Labs\CENG209F19_Lab01\CENG209F19_Lab01\util.asm'
H:\CNEG209\Labs\CENG209F19_Lab01\CENG209F19_Lab01\main.asm(61): Including file 'H:\CNEG209\Labs\CENG209F19_Lab01\CENG209F19_Lab01\serialio.asm'
H:\CNEG209\Labs\CENG209F19_Lab01\CENG209F19_Lab01\main.asm(62): Including file 'H:\CNEG209\Labs\CENG209F19_Lab01\CENG209F19_Lab01\adc.asm'
H:\CNEG209\Labs\CENG209F19_Lab01\CENG209F19_Lab01\main.asm(63): Including file 'H:\CNEG209\Labs\CENG209F19_Lab01\CENG209F19_Lab01\i2c.asm'
H:\CNEG209\Labs\CENG209F19_Lab01\CENG209F19_Lab01\main.asm(64): Including file 'H:\CNEG209\Labs\CENG209F19_Lab01\CENG209F19_Lab01\rtcds1307.asm'
H:\CNEG209\Labs\CENG209F19_Lab01\CENG209F19_Lab01\main.asm(65): Including file 'H:\CNEG209\Labs\CENG209F19_Lab01\CENG209F19_Lab01\andisplay.asm'
                                 
                                 ;
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega328P.xml **********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m328Pdef.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega328P
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega328P
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M328PDEF_INC_
                                 #define _M328PDEF_INC_
                                 
                                 
                                 #pragma partinc 0
                                 
                                 ; ***** SPECIFY DEVICE ***************************************************
                                 .device ATmega328P
                                 #pragma AVRPART ADMIN PART_NAME ATmega328P
                                 .equ	SIGNATURE_000	= 0x1e
                                 .equ	SIGNATURE_001	= 0x95
                                 .equ	SIGNATURE_002	= 0x0f
                                 
                                 #pragma AVRPART CORE CORE_VERSION V2E
                                 
                                 
                                 ; ***** I/O REGISTER DEFINITIONS *****************************************
                                 ; NOTE:
                                 ; Definitions marked "MEMORY MAPPED"are extended I/O ports
                                 ; and cannot be used with IN/OUT instructions
                                 .equ	UDR0	= 0xc6	; MEMORY MAPPED
                                 .equ	UBRR0L	= 0xc4	; MEMORY MAPPED
                                 .equ	UBRR0H	= 0xc5	; MEMORY MAPPED
                                 .equ	UCSR0C	= 0xc2	; MEMORY MAPPED
                                 .equ	UCSR0B	= 0xc1	; MEMORY MAPPED
                                 .equ	UCSR0A	= 0xc0	; MEMORY MAPPED
                                 .equ	TWAMR	= 0xbd	; MEMORY MAPPED
                                 .equ	TWCR	= 0xbc	; MEMORY MAPPED
                                 .equ	TWDR	= 0xbb	; MEMORY MAPPED
                                 .equ	TWAR	= 0xba	; MEMORY MAPPED
                                 .equ	TWSR	= 0xb9	; MEMORY MAPPED
                                 .equ	TWBR	= 0xb8	; MEMORY MAPPED
                                 .equ	ASSR	= 0xb6	; MEMORY MAPPED
                                 .equ	OCR2B	= 0xb4	; MEMORY MAPPED
                                 .equ	OCR2A	= 0xb3	; MEMORY MAPPED
                                 .equ	TCNT2	= 0xb2	; MEMORY MAPPED
                                 .equ	TCCR2B	= 0xb1	; MEMORY MAPPED
                                 .equ	TCCR2A	= 0xb0	; MEMORY MAPPED
                                 .equ	OCR1BL	= 0x8a	; MEMORY MAPPED
                                 .equ	OCR1BH	= 0x8b	; MEMORY MAPPED
                                 .equ	OCR1AL	= 0x88	; MEMORY MAPPED
                                 .equ	OCR1AH	= 0x89	; MEMORY MAPPED
                                 .equ	ICR1L	= 0x86	; MEMORY MAPPED
                                 .equ	ICR1H	= 0x87	; MEMORY MAPPED
                                 .equ	TCNT1L	= 0x84	; MEMORY MAPPED
                                 .equ	TCNT1H	= 0x85	; MEMORY MAPPED
                                 .equ	TCCR1C	= 0x82	; MEMORY MAPPED
                                 .equ	TCCR1B	= 0x81	; MEMORY MAPPED
                                 .equ	TCCR1A	= 0x80	; MEMORY MAPPED
                                 .equ	DIDR1	= 0x7f	; MEMORY MAPPED
                                 .equ	DIDR0	= 0x7e	; MEMORY MAPPED
                                 .equ	ADMUX	= 0x7c	; MEMORY MAPPED
                                 .equ	ADCSRB	= 0x7b	; MEMORY MAPPED
                                 .equ	ADCSRA	= 0x7a	; MEMORY MAPPED
                                 .equ	ADCH	= 0x79	; MEMORY MAPPED
                                 .equ	ADCL	= 0x78	; MEMORY MAPPED
                                 .equ	TIMSK2	= 0x70	; MEMORY MAPPED
                                 .equ	TIMSK1	= 0x6f	; MEMORY MAPPED
                                 .equ	TIMSK0	= 0x6e	; MEMORY MAPPED
                                 .equ	PCMSK1	= 0x6c	; MEMORY MAPPED
                                 .equ	PCMSK2	= 0x6d	; MEMORY MAPPED
                                 .equ	PCMSK0	= 0x6b	; MEMORY MAPPED
                                 .equ	EICRA	= 0x69	; MEMORY MAPPED
                                 .equ	PCICR	= 0x68	; MEMORY MAPPED
                                 .equ	OSCCAL	= 0x66	; MEMORY MAPPED
                                 .equ	PRR	= 0x64	; MEMORY MAPPED
                                 .equ	CLKPR	= 0x61	; MEMORY MAPPED
                                 .equ	WDTCSR	= 0x60	; MEMORY MAPPED
                                 .equ	SREG	= 0x3f
                                 .equ	SPL	= 0x3d
                                 .equ	SPH	= 0x3e
                                 .equ	SPMCSR	= 0x37
                                 .equ	MCUCR	= 0x35
                                 .equ	MCUSR	= 0x34
                                 .equ	SMCR	= 0x33
                                 .equ	ACSR	= 0x30
                                 .equ	SPDR	= 0x2e
                                 .equ	SPSR	= 0x2d
                                 .equ	SPCR	= 0x2c
                                 .equ	GPIOR2	= 0x2b
                                 .equ	GPIOR1	= 0x2a
                                 .equ	OCR0B	= 0x28
                                 .equ	OCR0A	= 0x27
                                 .equ	TCNT0	= 0x26
                                 .equ	TCCR0B	= 0x25
                                 .equ	TCCR0A	= 0x24
                                 .equ	GTCCR	= 0x23
                                 .equ	EEARH	= 0x22
                                 .equ	EEARL	= 0x21
                                 .equ	EEDR	= 0x20
                                 .equ	EECR	= 0x1f
                                 .equ	GPIOR0	= 0x1e
                                 .equ	EIMSK	= 0x1d
                                 .equ	EIFR	= 0x1c
                                 .equ	PCIFR	= 0x1b
                                 .equ	TIFR2	= 0x17
                                 .equ	TIFR1	= 0x16
                                 .equ	TIFR0	= 0x15
                                 .equ	PORTD	= 0x0b
                                 .equ	DDRD	= 0x0a
                                 .equ	PIND	= 0x09
                                 .equ	PORTC	= 0x08
                                 .equ	DDRC	= 0x07
                                 .equ	PINC	= 0x06
                                 .equ	PORTB	= 0x05
                                 .equ	DDRB	= 0x04
                                 .equ	PINB	= 0x03
                                 
                                 
                                 ; ***** BIT DEFINITIONS **************************************************
                                 
                                 ; ***** USART0 ***********************
                                 ; UDR0 - USART I/O Data Register
                                 .equ	UDR0_0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR0_1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR0_2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR0_3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR0_4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR0_5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR0_6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR0_7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR0A - USART Control and Status Register A
                                 .equ	MPCM0	= 0	; Multi-processor Communication Mode
                                 .equ	U2X0	= 1	; Double the USART transmission speed
                                 .equ	UPE0	= 2	; Parity Error
                                 .equ	DOR0	= 3	; Data overRun
                                 .equ	FE0	= 4	; Framing Error
                                 .equ	UDRE0	= 5	; USART Data Register Empty
                                 .equ	TXC0	= 6	; USART Transmitt Complete
                                 .equ	RXC0	= 7	; USART Receive Complete
                                 
                                 ; UCSR0B - USART Control and Status Register B
                                 .equ	TXB80	= 0	; Transmit Data Bit 8
                                 .equ	RXB80	= 1	; Receive Data Bit 8
                                 .equ	UCSZ02	= 2	; Character Size
                                 .equ	TXEN0	= 3	; Transmitter Enable
                                 .equ	RXEN0	= 4	; Receiver Enable
                                 .equ	UDRIE0	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE0	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE0	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR0C - USART Control and Status Register C
                                 .equ	UCPOL0	= 0	; Clock Polarity
                                 .equ	UCSZ00	= 1	; Character Size
                                 .equ	UCPHA0	= UCSZ00	; For compatibility
                                 .equ	UCSZ01	= 2	; Character Size
                                 .equ	UDORD0	= UCSZ01	; For compatibility
                                 .equ	USBS0	= 3	; Stop Bit Select
                                 .equ	UPM00	= 4	; Parity Mode Bit 0
                                 .equ	UPM01	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL00	= 6	; USART Mode Select
                                 .equ	UMSEL0	= UMSEL00	; For compatibility
                                 .equ	UMSEL01	= 7	; USART Mode Select
                                 .equ	UMSEL1	= UMSEL01	; For compatibility
                                 
                                 ; UBRR0H - USART Baud Rate Register High Byte
                                 .equ	UBRR8	= 0	; USART Baud Rate Register bit 8
                                 .equ	UBRR9	= 1	; USART Baud Rate Register bit 9
                                 .equ	UBRR10	= 2	; USART Baud Rate Register bit 10
                                 .equ	UBRR11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR0L - USART Baud Rate Register Low Byte
                                 .equ	_UBRR0	= 0	; USART Baud Rate Register bit 0
                                 .equ	_UBRR1	= 1	; USART Baud Rate Register bit 1
                                 .equ	UBRR2	= 2	; USART Baud Rate Register bit 2
                                 .equ	UBRR3	= 3	; USART Baud Rate Register bit 3
                                 .equ	UBRR4	= 4	; USART Baud Rate Register bit 4
                                 .equ	UBRR5	= 5	; USART Baud Rate Register bit 5
                                 .equ	UBRR6	= 6	; USART Baud Rate Register bit 6
                                 .equ	UBRR7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 ; ***** TWI **************************
                                 ; TWAMR - TWI (Slave) Address Mask Register
                                 .equ	TWAM0	= 1	; 
                                 .equ	TWAMR0	= TWAM0	; For compatibility
                                 .equ	TWAM1	= 2	; 
                                 .equ	TWAMR1	= TWAM1	; For compatibility
                                 .equ	TWAM2	= 3	; 
                                 .equ	TWAMR2	= TWAM2	; For compatibility
                                 .equ	TWAM3	= 4	; 
                                 .equ	TWAMR3	= TWAM3	; For compatibility
                                 .equ	TWAM4	= 5	; 
                                 .equ	TWAMR4	= TWAM4	; For compatibility
                                 .equ	TWAM5	= 6	; 
                                 .equ	TWAMR5	= TWAM5	; For compatibility
                                 .equ	TWAM6	= 7	; 
                                 .equ	TWAMR6	= TWAM6	; For compatibility
                                 
                                 ; TWBR - TWI Bit Rate register
                                 .equ	TWBR0	= 0	; 
                                 .equ	TWBR1	= 1	; 
                                 .equ	TWBR2	= 2	; 
                                 .equ	TWBR3	= 3	; 
                                 .equ	TWBR4	= 4	; 
                                 .equ	TWBR5	= 5	; 
                                 .equ	TWBR6	= 6	; 
                                 .equ	TWBR7	= 7	; 
                                 
                                 ; TWCR - TWI Control Register
                                 .equ	TWIE	= 0	; TWI Interrupt Enable
                                 .equ	TWEN	= 2	; TWI Enable Bit
                                 .equ	TWWC	= 3	; TWI Write Collition Flag
                                 .equ	TWSTO	= 4	; TWI Stop Condition Bit
                                 .equ	TWSTA	= 5	; TWI Start Condition Bit
                                 .equ	TWEA	= 6	; TWI Enable Acknowledge Bit
                                 .equ	TWINT	= 7	; TWI Interrupt Flag
                                 
                                 ; TWSR - TWI Status Register
                                 .equ	TWPS0	= 0	; TWI Prescaler
                                 .equ	TWPS1	= 1	; TWI Prescaler
                                 .equ	TWS3	= 3	; TWI Status
                                 .equ	TWS4	= 4	; TWI Status
                                 .equ	TWS5	= 5	; TWI Status
                                 .equ	TWS6	= 6	; TWI Status
                                 .equ	TWS7	= 7	; TWI Status
                                 
                                 ; TWDR - TWI Data register
                                 .equ	TWD0	= 0	; TWI Data Register Bit 0
                                 .equ	TWD1	= 1	; TWI Data Register Bit 1
                                 .equ	TWD2	= 2	; TWI Data Register Bit 2
                                 .equ	TWD3	= 3	; TWI Data Register Bit 3
                                 .equ	TWD4	= 4	; TWI Data Register Bit 4
                                 .equ	TWD5	= 5	; TWI Data Register Bit 5
                                 .equ	TWD6	= 6	; TWI Data Register Bit 6
                                 .equ	TWD7	= 7	; TWI Data Register Bit 7
                                 
                                 ; TWAR - TWI (Slave) Address register
                                 .equ	TWGCE	= 0	; TWI General Call Recognition Enable Bit
                                 .equ	TWA0	= 1	; TWI (Slave) Address register Bit 0
                                 .equ	TWA1	= 2	; TWI (Slave) Address register Bit 1
                                 .equ	TWA2	= 3	; TWI (Slave) Address register Bit 2
                                 .equ	TWA3	= 4	; TWI (Slave) Address register Bit 3
                                 .equ	TWA4	= 5	; TWI (Slave) Address register Bit 4
                                 .equ	TWA5	= 6	; TWI (Slave) Address register Bit 5
                                 .equ	TWA6	= 7	; TWI (Slave) Address register Bit 6
                                 
                                 
                                 ; ***** TIMER_COUNTER_1 **************
                                 ; TIMSK1 - Timer/Counter Interrupt Mask Register
                                 .equ	TOIE1	= 0	; Timer/Counter1 Overflow Interrupt Enable
                                 .equ	OCIE1A	= 1	; Timer/Counter1 Output CompareA Match Interrupt Enable
                                 .equ	OCIE1B	= 2	; Timer/Counter1 Output CompareB Match Interrupt Enable
                                 .equ	ICIE1	= 5	; Timer/Counter1 Input Capture Interrupt Enable
                                 
                                 ; TIFR1 - Timer/Counter Interrupt Flag register
                                 .equ	TOV1	= 0	; Timer/Counter1 Overflow Flag
                                 .equ	OCF1A	= 1	; Output Compare Flag 1A
                                 .equ	OCF1B	= 2	; Output Compare Flag 1B
                                 .equ	ICF1	= 5	; Input Capture Flag 1
                                 
                                 ; TCCR1A - Timer/Counter1 Control Register A
                                 .equ	WGM10	= 0	; Waveform Generation Mode
                                 .equ	WGM11	= 1	; Waveform Generation Mode
                                 .equ	COM1B0	= 4	; Compare Output Mode 1B, bit 0
                                 .equ	COM1B1	= 5	; Compare Output Mode 1B, bit 1
                                 .equ	COM1A0	= 6	; Comparet Ouput Mode 1A, bit 0
                                 .equ	COM1A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR1B - Timer/Counter1 Control Register B
                                 .equ	CS10	= 0	; Prescaler source of Timer/Counter 1
                                 .equ	CS11	= 1	; Prescaler source of Timer/Counter 1
                                 .equ	CS12	= 2	; Prescaler source of Timer/Counter 1
                                 .equ	WGM12	= 3	; Waveform Generation Mode
                                 .equ	WGM13	= 4	; Waveform Generation Mode
                                 .equ	ICES1	= 6	; Input Capture 1 Edge Select
                                 .equ	ICNC1	= 7	; Input Capture 1 Noise Canceler
                                 
                                 ; TCCR1C - Timer/Counter1 Control Register C
                                 .equ	FOC1B	= 6	; 
                                 .equ	FOC1A	= 7	; 
                                 
                                 ; GTCCR - General Timer/Counter Control Register
                                 .equ	PSRSYNC	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
                                 .equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** TIMER_COUNTER_2 **************
                                 ; TIMSK2 - Timer/Counter Interrupt Mask register
                                 .equ	TOIE2	= 0	; Timer/Counter2 Overflow Interrupt Enable
                                 .equ	TOIE2A	= TOIE2	; For compatibility
                                 .equ	OCIE2A	= 1	; Timer/Counter2 Output Compare Match A Interrupt Enable
                                 .equ	OCIE2B	= 2	; Timer/Counter2 Output Compare Match B Interrupt Enable
                                 
                                 ; TIFR2 - Timer/Counter Interrupt Flag Register
                                 .equ	TOV2	= 0	; Timer/Counter2 Overflow Flag
                                 .equ	OCF2A	= 1	; Output Compare Flag 2A
                                 .equ	OCF2B	= 2	; Output Compare Flag 2B
                                 
                                 ; TCCR2A - Timer/Counter2 Control Register A
                                 .equ	WGM20	= 0	; Waveform Genration Mode
                                 .equ	WGM21	= 1	; Waveform Genration Mode
                                 .equ	COM2B0	= 4	; Compare Output Mode bit 0
                                 .equ	COM2B1	= 5	; Compare Output Mode bit 1
                                 .equ	COM2A0	= 6	; Compare Output Mode bit 1
                                 .equ	COM2A1	= 7	; Compare Output Mode bit 1
                                 
                                 ; TCCR2B - Timer/Counter2 Control Register B
                                 .equ	CS20	= 0	; Clock Select bit 0
                                 .equ	CS21	= 1	; Clock Select bit 1
                                 .equ	CS22	= 2	; Clock Select bit 2
                                 .equ	WGM22	= 3	; Waveform Generation Mode
                                 .equ	FOC2B	= 6	; Force Output Compare B
                                 .equ	FOC2A	= 7	; Force Output Compare A
                                 
                                 ; TCNT2 - Timer/Counter2
                                 .equ	TCNT2_0	= 0	; Timer/Counter 2 bit 0
                                 .equ	TCNT2_1	= 1	; Timer/Counter 2 bit 1
                                 .equ	TCNT2_2	= 2	; Timer/Counter 2 bit 2
                                 .equ	TCNT2_3	= 3	; Timer/Counter 2 bit 3
                                 .equ	TCNT2_4	= 4	; Timer/Counter 2 bit 4
                                 .equ	TCNT2_5	= 5	; Timer/Counter 2 bit 5
                                 .equ	TCNT2_6	= 6	; Timer/Counter 2 bit 6
                                 .equ	TCNT2_7	= 7	; Timer/Counter 2 bit 7
                                 
                                 ; OCR2A - Timer/Counter2 Output Compare Register A
                                 .equ	OCR2A_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2A_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2A_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2A_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2A_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2A_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2A_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2A_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; OCR2B - Timer/Counter2 Output Compare Register B
                                 .equ	OCR2B_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2B_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2B_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2B_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2B_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2B_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2B_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2B_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; ASSR - Asynchronous Status Register
                                 .equ	TCR2BUB	= 0	; Timer/Counter Control Register2 Update Busy
                                 .equ	TCR2AUB	= 1	; Timer/Counter Control Register2 Update Busy
                                 .equ	OCR2BUB	= 2	; Output Compare Register 2 Update Busy
                                 .equ	OCR2AUB	= 3	; Output Compare Register2 Update Busy
                                 .equ	TCN2UB	= 4	; Timer/Counter2 Update Busy
                                 .equ	AS2	= 5	; Asynchronous Timer/Counter2
                                 .equ	EXCLK	= 6	; Enable External Clock Input
                                 
                                 ; GTCCR - General Timer Counter Control register
                                 .equ	PSRASY	= 1	; Prescaler Reset Timer/Counter2
                                 .equ	PSR2	= PSRASY	; For compatibility
                                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** AD_CONVERTER *****************
                                 ; ADMUX - The ADC multiplexer Selection Register
                                 .equ	MUX0	= 0	; Analog Channel and Gain Selection Bits
                                 .equ	MUX1	= 1	; Analog Channel and Gain Selection Bits
                                 .equ	MUX2	= 2	; Analog Channel and Gain Selection Bits
                                 .equ	MUX3	= 3	; Analog Channel and Gain Selection Bits
                                 .equ	ADLAR	= 5	; Left Adjust Result
                                 .equ	REFS0	= 6	; Reference Selection Bit 0
                                 .equ	REFS1	= 7	; Reference Selection Bit 1
                                 
                                 ; ADCSRA - The ADC Control and Status register A
                                 .equ	ADPS0	= 0	; ADC  Prescaler Select Bits
                                 .equ	ADPS1	= 1	; ADC  Prescaler Select Bits
                                 .equ	ADPS2	= 2	; ADC  Prescaler Select Bits
                                 .equ	ADIE	= 3	; ADC Interrupt Enable
                                 .equ	ADIF	= 4	; ADC Interrupt Flag
                                 .equ	ADATE	= 5	; ADC  Auto Trigger Enable
                                 .equ	ADSC	= 6	; ADC Start Conversion
                                 .equ	ADEN	= 7	; ADC Enable
                                 
                                 ; ADCSRB - The ADC Control and Status register B
                                 .equ	ADTS0	= 0	; ADC Auto Trigger Source bit 0
                                 .equ	ADTS1	= 1	; ADC Auto Trigger Source bit 1
                                 .equ	ADTS2	= 2	; ADC Auto Trigger Source bit 2
                                 .equ	ACME	= 6	; 
                                 
                                 ; ADCH - ADC Data Register High Byte
                                 .equ	ADCH0	= 0	; ADC Data Register High Byte Bit 0
                                 .equ	ADCH1	= 1	; ADC Data Register High Byte Bit 1
                                 .equ	ADCH2	= 2	; ADC Data Register High Byte Bit 2
                                 .equ	ADCH3	= 3	; ADC Data Register High Byte Bit 3
                                 .equ	ADCH4	= 4	; ADC Data Register High Byte Bit 4
                                 .equ	ADCH5	= 5	; ADC Data Register High Byte Bit 5
                                 .equ	ADCH6	= 6	; ADC Data Register High Byte Bit 6
                                 .equ	ADCH7	= 7	; ADC Data Register High Byte Bit 7
                                 
                                 ; ADCL - ADC Data Register Low Byte
                                 .equ	ADCL0	= 0	; ADC Data Register Low Byte Bit 0
                                 .equ	ADCL1	= 1	; ADC Data Register Low Byte Bit 1
                                 .equ	ADCL2	= 2	; ADC Data Register Low Byte Bit 2
                                 .equ	ADCL3	= 3	; ADC Data Register Low Byte Bit 3
                                 .equ	ADCL4	= 4	; ADC Data Register Low Byte Bit 4
                                 .equ	ADCL5	= 5	; ADC Data Register Low Byte Bit 5
                                 .equ	ADCL6	= 6	; ADC Data Register Low Byte Bit 6
                                 .equ	ADCL7	= 7	; ADC Data Register Low Byte Bit 7
                                 
                                 ; DIDR0 - Digital Input Disable Register
                                 .equ	ADC0D	= 0	; 
                                 .equ	ADC1D	= 1	; 
                                 .equ	ADC2D	= 2	; 
                                 .equ	ADC3D	= 3	; 
                                 .equ	ADC4D	= 4	; 
                                 .equ	ADC5D	= 5	; 
                                 
                                 
                                 ; ***** ANALOG_COMPARATOR ************
                                 ; ACSR - Analog Comparator Control And Status Register
                                 .equ	ACIS0	= 0	; Analog Comparator Interrupt Mode Select bit 0
                                 .equ	ACIS1	= 1	; Analog Comparator Interrupt Mode Select bit 1
                                 .equ	ACIC	= 2	; Analog Comparator Input Capture Enable
                                 .equ	ACIE	= 3	; Analog Comparator Interrupt Enable
                                 .equ	ACI	= 4	; Analog Comparator Interrupt Flag
                                 .equ	ACO	= 5	; Analog Compare Output
                                 .equ	ACBG	= 6	; Analog Comparator Bandgap Select
                                 .equ	ACD	= 7	; Analog Comparator Disable
                                 
                                 ; DIDR1 - Digital Input Disable Register 1
                                 .equ	AIN0D	= 0	; AIN0 Digital Input Disable
                                 .equ	AIN1D	= 1	; AIN1 Digital Input Disable
                                 
                                 
                                 ; ***** PORTB ************************
                                 ; PORTB - Port B Data Register
                                 .equ	PORTB0	= 0	; Port B Data Register bit 0
                                 .equ	PB0	= 0	; For compatibility
                                 .equ	PORTB1	= 1	; Port B Data Register bit 1
                                 .equ	PB1	= 1	; For compatibility
                                 .equ	PORTB2	= 2	; Port B Data Register bit 2
                                 .equ	PB2	= 2	; For compatibility
                                 .equ	PORTB3	= 3	; Port B Data Register bit 3
                                 .equ	PB3	= 3	; For compatibility
                                 .equ	PORTB4	= 4	; Port B Data Register bit 4
                                 .equ	PB4	= 4	; For compatibility
                                 .equ	PORTB5	= 5	; Port B Data Register bit 5
                                 .equ	PB5	= 5	; For compatibility
                                 .equ	PORTB6	= 6	; Port B Data Register bit 6
                                 .equ	PB6	= 6	; For compatibility
                                 .equ	PORTB7	= 7	; Port B Data Register bit 7
                                 .equ	PB7	= 7	; For compatibility
                                 
                                 ; DDRB - Port B Data Direction Register
                                 .equ	DDB0	= 0	; Port B Data Direction Register bit 0
                                 .equ	DDB1	= 1	; Port B Data Direction Register bit 1
                                 .equ	DDB2	= 2	; Port B Data Direction Register bit 2
                                 .equ	DDB3	= 3	; Port B Data Direction Register bit 3
                                 .equ	DDB4	= 4	; Port B Data Direction Register bit 4
                                 .equ	DDB5	= 5	; Port B Data Direction Register bit 5
                                 .equ	DDB6	= 6	; Port B Data Direction Register bit 6
                                 .equ	DDB7	= 7	; Port B Data Direction Register bit 7
                                 
                                 ; PINB - Port B Input Pins
                                 .equ	PINB0	= 0	; Port B Input Pins bit 0
                                 .equ	PINB1	= 1	; Port B Input Pins bit 1
                                 .equ	PINB2	= 2	; Port B Input Pins bit 2
                                 .equ	PINB3	= 3	; Port B Input Pins bit 3
                                 .equ	PINB4	= 4	; Port B Input Pins bit 4
                                 .equ	PINB5	= 5	; Port B Input Pins bit 5
                                 .equ	PINB6	= 6	; Port B Input Pins bit 6
                                 .equ	PINB7	= 7	; Port B Input Pins bit 7
                                 
                                 
                                 ; ***** PORTC ************************
                                 ; PORTC - Port C Data Register
                                 .equ	PORTC0	= 0	; Port C Data Register bit 0
                                 .equ	PC0	= 0	; For compatibility
                                 .equ	PORTC1	= 1	; Port C Data Register bit 1
                                 .equ	PC1	= 1	; For compatibility
                                 .equ	PORTC2	= 2	; Port C Data Register bit 2
                                 .equ	PC2	= 2	; For compatibility
                                 .equ	PORTC3	= 3	; Port C Data Register bit 3
                                 .equ	PC3	= 3	; For compatibility
                                 .equ	PORTC4	= 4	; Port C Data Register bit 4
                                 .equ	PC4	= 4	; For compatibility
                                 .equ	PORTC5	= 5	; Port C Data Register bit 5
                                 .equ	PC5	= 5	; For compatibility
                                 .equ	PORTC6	= 6	; Port C Data Register bit 6
                                 .equ	PC6	= 6	; For compatibility
                                 
                                 ; DDRC - Port C Data Direction Register
                                 .equ	DDC0	= 0	; Port C Data Direction Register bit 0
                                 .equ	DDC1	= 1	; Port C Data Direction Register bit 1
                                 .equ	DDC2	= 2	; Port C Data Direction Register bit 2
                                 .equ	DDC3	= 3	; Port C Data Direction Register bit 3
                                 .equ	DDC4	= 4	; Port C Data Direction Register bit 4
                                 .equ	DDC5	= 5	; Port C Data Direction Register bit 5
                                 .equ	DDC6	= 6	; Port C Data Direction Register bit 6
                                 
                                 ; PINC - Port C Input Pins
                                 .equ	PINC0	= 0	; Port C Input Pins bit 0
                                 .equ	PINC1	= 1	; Port C Input Pins bit 1
                                 .equ	PINC2	= 2	; Port C Input Pins bit 2
                                 .equ	PINC3	= 3	; Port C Input Pins bit 3
                                 .equ	PINC4	= 4	; Port C Input Pins bit 4
                                 .equ	PINC5	= 5	; Port C Input Pins bit 5
                                 .equ	PINC6	= 6	; Port C Input Pins bit 6
                                 
                                 
                                 ; ***** PORTD ************************
                                 ; PORTD - Port D Data Register
                                 .equ	PORTD0	= 0	; Port D Data Register bit 0
                                 .equ	PD0	= 0	; For compatibility
                                 .equ	PORTD1	= 1	; Port D Data Register bit 1
                                 .equ	PD1	= 1	; For compatibility
                                 .equ	PORTD2	= 2	; Port D Data Register bit 2
                                 .equ	PD2	= 2	; For compatibility
                                 .equ	PORTD3	= 3	; Port D Data Register bit 3
                                 .equ	PD3	= 3	; For compatibility
                                 .equ	PORTD4	= 4	; Port D Data Register bit 4
                                 .equ	PD4	= 4	; For compatibility
                                 .equ	PORTD5	= 5	; Port D Data Register bit 5
                                 .equ	PD5	= 5	; For compatibility
                                 .equ	PORTD6	= 6	; Port D Data Register bit 6
                                 .equ	PD6	= 6	; For compatibility
                                 .equ	PORTD7	= 7	; Port D Data Register bit 7
                                 .equ	PD7	= 7	; For compatibility
                                 
                                 ; DDRD - Port D Data Direction Register
                                 .equ	DDD0	= 0	; Port D Data Direction Register bit 0
                                 .equ	DDD1	= 1	; Port D Data Direction Register bit 1
                                 .equ	DDD2	= 2	; Port D Data Direction Register bit 2
                                 .equ	DDD3	= 3	; Port D Data Direction Register bit 3
                                 .equ	DDD4	= 4	; Port D Data Direction Register bit 4
                                 .equ	DDD5	= 5	; Port D Data Direction Register bit 5
                                 .equ	DDD6	= 6	; Port D Data Direction Register bit 6
                                 .equ	DDD7	= 7	; Port D Data Direction Register bit 7
                                 
                                 ; PIND - Port D Input Pins
                                 .equ	PIND0	= 0	; Port D Input Pins bit 0
                                 .equ	PIND1	= 1	; Port D Input Pins bit 1
                                 .equ	PIND2	= 2	; Port D Input Pins bit 2
                                 .equ	PIND3	= 3	; Port D Input Pins bit 3
                                 .equ	PIND4	= 4	; Port D Input Pins bit 4
                                 .equ	PIND5	= 5	; Port D Input Pins bit 5
                                 .equ	PIND6	= 6	; Port D Input Pins bit 6
                                 .equ	PIND7	= 7	; Port D Input Pins bit 7
                                 
                                 
                                 ; ***** TIMER_COUNTER_0 **************
                                 ; TIMSK0 - Timer/Counter0 Interrupt Mask Register
                                 .equ	TOIE0	= 0	; Timer/Counter0 Overflow Interrupt Enable
                                 .equ	OCIE0A	= 1	; Timer/Counter0 Output Compare Match A Interrupt Enable
                                 .equ	OCIE0B	= 2	; Timer/Counter0 Output Compare Match B Interrupt Enable
                                 
                                 ; TIFR0 - Timer/Counter0 Interrupt Flag register
                                 .equ	TOV0	= 0	; Timer/Counter0 Overflow Flag
                                 .equ	OCF0A	= 1	; Timer/Counter0 Output Compare Flag 0A
                                 .equ	OCF0B	= 2	; Timer/Counter0 Output Compare Flag 0B
                                 
                                 ; TCCR0A - Timer/Counter  Control Register A
                                 .equ	WGM00	= 0	; Waveform Generation Mode
                                 .equ	WGM01	= 1	; Waveform Generation Mode
                                 .equ	COM0B0	= 4	; Compare Output Mode, Fast PWm
                                 .equ	COM0B1	= 5	; Compare Output Mode, Fast PWm
                                 .equ	COM0A0	= 6	; Compare Output Mode, Phase Correct PWM Mode
                                 .equ	COM0A1	= 7	; Compare Output Mode, Phase Correct PWM Mode
                                 
                                 ; TCCR0B - Timer/Counter Control Register B
                                 .equ	CS00	= 0	; Clock Select
                                 .equ	CS01	= 1	; Clock Select
                                 .equ	CS02	= 2	; Clock Select
                                 .equ	WGM02	= 3	; 
                                 .equ	FOC0B	= 6	; Force Output Compare B
                                 .equ	FOC0A	= 7	; Force Output Compare A
                                 
                                 ; TCNT0 - Timer/Counter0
                                 .equ	TCNT0_0	= 0	; 
                                 .equ	TCNT0_1	= 1	; 
                                 .equ	TCNT0_2	= 2	; 
                                 .equ	TCNT0_3	= 3	; 
                                 .equ	TCNT0_4	= 4	; 
                                 .equ	TCNT0_5	= 5	; 
                                 .equ	TCNT0_6	= 6	; 
                                 .equ	TCNT0_7	= 7	; 
                                 
                                 ; OCR0A - Timer/Counter0 Output Compare Register
                                 .equ	OCR0A_0	= 0	; 
                                 .equ	OCR0A_1	= 1	; 
                                 .equ	OCR0A_2	= 2	; 
                                 .equ	OCR0A_3	= 3	; 
                                 .equ	OCR0A_4	= 4	; 
                                 .equ	OCR0A_5	= 5	; 
                                 .equ	OCR0A_6	= 6	; 
                                 .equ	OCR0A_7	= 7	; 
                                 
                                 ; OCR0B - Timer/Counter0 Output Compare Register
                                 .equ	OCR0B_0	= 0	; 
                                 .equ	OCR0B_1	= 1	; 
                                 .equ	OCR0B_2	= 2	; 
                                 .equ	OCR0B_3	= 3	; 
                                 .equ	OCR0B_4	= 4	; 
                                 .equ	OCR0B_5	= 5	; 
                                 .equ	OCR0B_6	= 6	; 
                                 .equ	OCR0B_7	= 7	; 
                                 
                                 ; GTCCR - General Timer/Counter Control Register
                                 ;.equ	PSRSYNC	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
                                 .equ	PSR10	= PSRSYNC	; For compatibility
                                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** EXTERNAL_INTERRUPT ***********
                                 ; EICRA - External Interrupt Control Register
                                 .equ	ISC00	= 0	; External Interrupt Sense Control 0 Bit 0
                                 .equ	ISC01	= 1	; External Interrupt Sense Control 0 Bit 1
                                 .equ	ISC10	= 2	; External Interrupt Sense Control 1 Bit 0
                                 .equ	ISC11	= 3	; External Interrupt Sense Control 1 Bit 1
                                 
                                 ; EIMSK - External Interrupt Mask Register
                                 .equ	INT0	= 0	; External Interrupt Request 0 Enable
                                 .equ	INT1	= 1	; External Interrupt Request 1 Enable
                                 
                                 ; EIFR - External Interrupt Flag Register
                                 .equ	INTF0	= 0	; External Interrupt Flag 0
                                 .equ	INTF1	= 1	; External Interrupt Flag 1
                                 
                                 ; PCICR - Pin Change Interrupt Control Register
                                 .equ	PCIE0	= 0	; Pin Change Interrupt Enable 0
                                 .equ	PCIE1	= 1	; Pin Change Interrupt Enable 1
                                 .equ	PCIE2	= 2	; Pin Change Interrupt Enable 2
                                 
                                 ; PCMSK2 - Pin Change Mask Register 2
                                 .equ	PCINT16	= 0	; Pin Change Enable Mask 16
                                 .equ	PCINT17	= 1	; Pin Change Enable Mask 17
                                 .equ	PCINT18	= 2	; Pin Change Enable Mask 18
                                 .equ	PCINT19	= 3	; Pin Change Enable Mask 19
                                 .equ	PCINT20	= 4	; Pin Change Enable Mask 20
                                 .equ	PCINT21	= 5	; Pin Change Enable Mask 21
                                 .equ	PCINT22	= 6	; Pin Change Enable Mask 22
                                 .equ	PCINT23	= 7	; Pin Change Enable Mask 23
                                 
                                 ; PCMSK1 - Pin Change Mask Register 1
                                 .equ	PCINT8	= 0	; Pin Change Enable Mask 8
                                 .equ	PCINT9	= 1	; Pin Change Enable Mask 9
                                 .equ	PCINT10	= 2	; Pin Change Enable Mask 10
                                 .equ	PCINT11	= 3	; Pin Change Enable Mask 11
                                 .equ	PCINT12	= 4	; Pin Change Enable Mask 12
                                 .equ	PCINT13	= 5	; Pin Change Enable Mask 13
                                 .equ	PCINT14	= 6	; Pin Change Enable Mask 14
                                 
                                 ; PCMSK0 - Pin Change Mask Register 0
                                 .equ	PCINT0	= 0	; Pin Change Enable Mask 0
                                 .equ	PCINT1	= 1	; Pin Change Enable Mask 1
                                 .equ	PCINT2	= 2	; Pin Change Enable Mask 2
                                 .equ	PCINT3	= 3	; Pin Change Enable Mask 3
                                 .equ	PCINT4	= 4	; Pin Change Enable Mask 4
                                 .equ	PCINT5	= 5	; Pin Change Enable Mask 5
                                 .equ	PCINT6	= 6	; Pin Change Enable Mask 6
                                 .equ	PCINT7	= 7	; Pin Change Enable Mask 7
                                 
                                 ; PCIFR - Pin Change Interrupt Flag Register
                                 .equ	PCIF0	= 0	; Pin Change Interrupt Flag 0
                                 .equ	PCIF1	= 1	; Pin Change Interrupt Flag 1
                                 .equ	PCIF2	= 2	; Pin Change Interrupt Flag 2
                                 
                                 
                                 ; ***** SPI **************************
                                 ; SPDR - SPI Data Register
                                 .equ	SPDR0	= 0	; SPI Data Register bit 0
                                 .equ	SPDR1	= 1	; SPI Data Register bit 1
                                 .equ	SPDR2	= 2	; SPI Data Register bit 2
                                 .equ	SPDR3	= 3	; SPI Data Register bit 3
                                 .equ	SPDR4	= 4	; SPI Data Register bit 4
                                 .equ	SPDR5	= 5	; SPI Data Register bit 5
                                 .equ	SPDR6	= 6	; SPI Data Register bit 6
                                 .equ	SPDR7	= 7	; SPI Data Register bit 7
                                 
                                 ; SPSR - SPI Status Register
                                 .equ	SPI2X	= 0	; Double SPI Speed Bit
                                 .equ	WCOL	= 6	; Write Collision Flag
                                 .equ	SPIF	= 7	; SPI Interrupt Flag
                                 
                                 ; SPCR - SPI Control Register
                                 .equ	SPR0	= 0	; SPI Clock Rate Select 0
                                 .equ	SPR1	= 1	; SPI Clock Rate Select 1
                                 .equ	CPHA	= 2	; Clock Phase
                                 .equ	CPOL	= 3	; Clock polarity
                                 .equ	MSTR	= 4	; Master/Slave Select
                                 .equ	DORD	= 5	; Data Order
                                 .equ	SPE	= 6	; SPI Enable
                                 .equ	SPIE	= 7	; SPI Interrupt Enable
                                 
                                 
                                 ; ***** WATCHDOG *********************
                                 ; WDTCSR - Watchdog Timer Control Register
                                 .equ	WDP0	= 0	; Watch Dog Timer Prescaler bit 0
                                 .equ	WDP1	= 1	; Watch Dog Timer Prescaler bit 1
                                 .equ	WDP2	= 2	; Watch Dog Timer Prescaler bit 2
                                 .equ	WDE	= 3	; Watch Dog Enable
                                 .equ	WDCE	= 4	; Watchdog Change Enable
                                 .equ	WDP3	= 5	; Watchdog Timer Prescaler Bit 3
                                 .equ	WDIE	= 6	; Watchdog Timeout Interrupt Enable
                                 .equ	WDIF	= 7	; Watchdog Timeout Interrupt Flag
                                 
                                 
                                 ; ***** CPU **************************
                                 ; SREG - Status Register
                                 .equ	SREG_C	= 0	; Carry Flag
                                 .equ	SREG_Z	= 1	; Zero Flag
                                 .equ	SREG_N	= 2	; Negative Flag
                                 .equ	SREG_V	= 3	; Two's Complement Overflow Flag
                                 .equ	SREG_S	= 4	; Sign Bit
                                 .equ	SREG_H	= 5	; Half Carry Flag
                                 .equ	SREG_T	= 6	; Bit Copy Storage
                                 .equ	SREG_I	= 7	; Global Interrupt Enable
                                 
                                 ; OSCCAL - Oscillator Calibration Value
                                 .equ	CAL0	= 0	; Oscillator Calibration Value Bit0
                                 .equ	CAL1	= 1	; Oscillator Calibration Value Bit1
                                 .equ	CAL2	= 2	; Oscillator Calibration Value Bit2
                                 .equ	CAL3	= 3	; Oscillator Calibration Value Bit3
                                 .equ	CAL4	= 4	; Oscillator Calibration Value Bit4
                                 .equ	CAL5	= 5	; Oscillator Calibration Value Bit5
                                 .equ	CAL6	= 6	; Oscillator Calibration Value Bit6
                                 .equ	CAL7	= 7	; Oscillator Calibration Value Bit7
                                 
                                 ; CLKPR - Clock Prescale Register
                                 .equ	CLKPS0	= 0	; Clock Prescaler Select Bit 0
                                 .equ	CLKPS1	= 1	; Clock Prescaler Select Bit 1
                                 .equ	CLKPS2	= 2	; Clock Prescaler Select Bit 2
                                 .equ	CLKPS3	= 3	; Clock Prescaler Select Bit 3
                                 .equ	CLKPCE	= 7	; Clock Prescaler Change Enable
                                 
                                 ; SPMCSR - Store Program Memory Control and Status Register
                                 .equ    SELFPRGEN = 0; Added for backwards compatibility
                                 .equ	SPMEN	= 0	; Store Program Memory
                                 .equ	PGERS	= 1	; Page Erase
                                 .equ	PGWRT	= 2	; Page Write
                                 .equ	BLBSET	= 3	; Boot Lock Bit Set
                                 .equ	RWWSRE	= 4	; Read-While-Write section read enable
                                 .equ    SIGRD   = 5 ; Signature Row Read
                                 .equ	RWWSB	= 6	; Read-While-Write Section Busy
                                 .equ	SPMIE	= 7	; SPM Interrupt Enable
                                 
                                 ; MCUCR - MCU Control Register
                                 .equ	IVCE	= 0	; 
                                 .equ	IVSEL	= 1	; 
                                 .equ	PUD	= 4	; 
                                 .equ	BODSE	= 5	; BOD Sleep Enable
                                 .equ	BODS	= 6	; BOD Sleep
                                 
                                 ; MCUSR - MCU Status Register
                                 .equ	PORF	= 0	; Power-on reset flag
                                 .equ	EXTRF	= 1	; External Reset Flag
                                 .equ	EXTREF	= EXTRF	; For compatibility
                                 .equ	BORF	= 2	; Brown-out Reset Flag
                                 .equ	WDRF	= 3	; Watchdog Reset Flag
                                 
                                 ; SMCR - Sleep Mode Control Register
                                 .equ	SE	= 0	; Sleep Enable
                                 .equ	SM0	= 1	; Sleep Mode Select Bit 0
                                 .equ	SM1	= 2	; Sleep Mode Select Bit 1
                                 .equ	SM2	= 3	; Sleep Mode Select Bit 2
                                 
                                 ; GPIOR2 - General Purpose I/O Register 2
                                 .equ	GPIOR20	= 0	; 
                                 .equ	GPIOR21	= 1	; 
                                 .equ	GPIOR22	= 2	; 
                                 .equ	GPIOR23	= 3	; 
                                 .equ	GPIOR24	= 4	; 
                                 .equ	GPIOR25	= 5	; 
                                 .equ	GPIOR26	= 6	; 
                                 .equ	GPIOR27	= 7	; 
                                 
                                 ; GPIOR1 - General Purpose I/O Register 1
                                 .equ	GPIOR10	= 0	; 
                                 .equ	GPIOR11	= 1	; 
                                 .equ	GPIOR12	= 2	; 
                                 .equ	GPIOR13	= 3	; 
                                 .equ	GPIOR14	= 4	; 
                                 .equ	GPIOR15	= 5	; 
                                 .equ	GPIOR16	= 6	; 
                                 .equ	GPIOR17	= 7	; 
                                 
                                 ; GPIOR0 - General Purpose I/O Register 0
                                 .equ	GPIOR00	= 0	; 
                                 .equ	GPIOR01	= 1	; 
                                 .equ	GPIOR02	= 2	; 
                                 .equ	GPIOR03	= 3	; 
                                 .equ	GPIOR04	= 4	; 
                                 .equ	GPIOR05	= 5	; 
                                 .equ	GPIOR06	= 6	; 
                                 .equ	GPIOR07	= 7	; 
                                 
                                 ; PRR - Power Reduction Register
                                 .equ	PRADC	= 0	; Power Reduction ADC
                                 .equ	PRUSART0	= 1	; Power Reduction USART
                                 .equ	PRSPI	= 2	; Power Reduction Serial Peripheral Interface
                                 .equ	PRTIM1	= 3	; Power Reduction Timer/Counter1
                                 .equ	PRTIM0	= 5	; Power Reduction Timer/Counter0
                                 .equ	PRTIM2	= 6	; Power Reduction Timer/Counter2
                                 .equ	PRTWI	= 7	; Power Reduction TWI
                                 
                                 
                                 ; ***** EEPROM ***********************
                                 ; EEARL - EEPROM Address Register Low Byte
                                 .equ	EEAR0	= 0	; EEPROM Read/Write Access Bit 0
                                 .equ	EEAR1	= 1	; EEPROM Read/Write Access Bit 1
                                 .equ	EEAR2	= 2	; EEPROM Read/Write Access Bit 2
                                 .equ	EEAR3	= 3	; EEPROM Read/Write Access Bit 3
                                 .equ	EEAR4	= 4	; EEPROM Read/Write Access Bit 4
                                 .equ	EEAR5	= 5	; EEPROM Read/Write Access Bit 5
                                 .equ	EEAR6	= 6	; EEPROM Read/Write Access Bit 6
                                 .equ	EEAR7	= 7	; EEPROM Read/Write Access Bit 7
                                 
                                 ; EEARH - EEPROM Address Register High Byte
                                 .equ	EEAR8	= 0	; EEPROM Read/Write Access Bit 8
                                 .equ	EEAR9	= 1	; EEPROM Read/Write Access Bit 9
                                 
                                 ; EEDR - EEPROM Data Register
                                 .equ	EEDR0	= 0	; EEPROM Data Register bit 0
                                 .equ	EEDR1	= 1	; EEPROM Data Register bit 1
                                 .equ	EEDR2	= 2	; EEPROM Data Register bit 2
                                 .equ	EEDR3	= 3	; EEPROM Data Register bit 3
                                 .equ	EEDR4	= 4	; EEPROM Data Register bit 4
                                 .equ	EEDR5	= 5	; EEPROM Data Register bit 5
                                 .equ	EEDR6	= 6	; EEPROM Data Register bit 6
                                 .equ	EEDR7	= 7	; EEPROM Data Register bit 7
                                 
                                 ; EECR - EEPROM Control Register
                                 .equ	EERE	= 0	; EEPROM Read Enable
                                 .equ	EEPE	= 1	; EEPROM Write Enable
                                 .equ	EEMPE	= 2	; EEPROM Master Write Enable
                                 .equ	EERIE	= 3	; EEPROM Ready Interrupt Enable
                                 .equ	EEPM0	= 4	; EEPROM Programming Mode Bit 0
                                 .equ	EEPM1	= 5	; EEPROM Programming Mode Bit 1
                                 
                                 
                                 
                                 ; ***** LOCKSBITS ********************************************************
                                 .equ	LB1	= 0	; Lock bit
                                 .equ	LB2	= 1	; Lock bit
                                 .equ	BLB01	= 2	; Boot Lock bit
                                 .equ	BLB02	= 3	; Boot Lock bit
                                 .equ	BLB11	= 4	; Boot lock bit
                                 .equ	BLB12	= 5	; Boot lock bit
                                 
                                 
                                 ; ***** FUSES ************************************************************
                                 ; LOW fuse bits
                                 .equ	CKSEL0	= 0	; Select Clock Source
                                 .equ	CKSEL1	= 1	; Select Clock Source
                                 .equ	CKSEL2	= 2	; Select Clock Source
                                 .equ	CKSEL3	= 3	; Select Clock Source
                                 .equ	SUT0	= 4	; Select start-up time
                                 .equ	SUT1	= 5	; Select start-up time
                                 .equ	CKOUT	= 6	; Clock output
                                 .equ	CKDIV8	= 7	; Divide clock by 8
                                 
                                 ; HIGH fuse bits
                                 .equ	BOOTRST	= 0	; Select reset vector
                                 .equ	BOOTSZ0	= 1	; Select boot size
                                 .equ	BOOTSZ1	= 2	; Select boot size
                                 .equ	EESAVE	= 3	; EEPROM memory is preserved through chip erase
                                 .equ	WDTON	= 4	; Watchdog Timer Always On
                                 .equ	SPIEN	= 5	; Enable Serial programming and Data Downloading
                                 .equ	DWEN	= 6	; debugWIRE Enable
                                 .equ	RSTDISBL	= 7	; External reset disable
                                 
                                 ; EXTENDED fuse bits
                                 .equ	BODLEVEL0	= 0	; Brown-out Detector trigger level
                                 .equ	BODLEVEL1	= 1	; Brown-out Detector trigger level
                                 .equ	BODLEVEL2	= 2	; Brown-out Detector trigger level
                                 
                                 
                                 
                                 ; ***** CPU REGISTER DEFINITIONS *****************************************
                                 .def	XH	= r27
                                 .def	XL	= r26
                                 .def	YH	= r29
                                 .def	YL	= r28
                                 .def	ZH	= r31
                                 .def	ZL	= r30
                                 
                                 
                                 
                                 ; ***** DATA MEMORY DECLARATIONS *****************************************
                                 .equ	FLASHEND	= 0x3fff	; Note: Word address
                                 .equ	IOEND	= 0x00ff
                                 .equ	SRAM_START	= 0x0100
                                 .equ	SRAM_SIZE	= 2048
                                 .equ	RAMEND	= 0x08ff
                                 .equ	XRAMEND	= 0x0000
                                 .equ	E2END	= 0x03ff
                                 .equ	EEPROMEND	= 0x03ff
                                 .equ	EEADRBITS	= 10
                                 #pragma AVRPART MEMORY PROG_FLASH 32768
                                 #pragma AVRPART MEMORY EEPROM 1024
                                 #pragma AVRPART MEMORY INT_SRAM SIZE 2048
                                 #pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                                 
                                 
                                 
                                 ; ***** BOOTLOADER DECLARATIONS ******************************************
                                 .equ	NRWW_START_ADDR	= 0x3800
                                 .equ	NRWW_STOP_ADDR	= 0x3fff
                                 .equ	RWW_START_ADDR	= 0x0
                                 .equ	RWW_STOP_ADDR	= 0x37ff
                                 .equ	PAGESIZE	= 64
                                 .equ	FIRSTBOOTSTART	= 0x3f00
                                 .equ	SECONDBOOTSTART	= 0x3e00
                                 .equ	THIRDBOOTSTART	= 0x3c00
                                 .equ	FOURTHBOOTSTART	= 0x3800
                                 .equ	SMALLBOOTSTART	= FIRSTBOOTSTART
                                 .equ	LARGEBOOTSTART	= FOURTHBOOTSTART
                                 
                                 
                                 
                                 ; ***** INTERRUPT VECTORS ************************************************
                                 .equ	INT0addr	= 0x0002	; External Interrupt Request 0
                                 .equ	INT1addr	= 0x0004	; External Interrupt Request 1
                                 .equ	PCI0addr	= 0x0006	; Pin Change Interrupt Request 0
                                 .equ	PCI1addr	= 0x0008	; Pin Change Interrupt Request 0
                                 .equ	PCI2addr	= 0x000a	; Pin Change Interrupt Request 1
                                 .equ	WDTaddr	= 0x000c	; Watchdog Time-out Interrupt
                                 .equ	OC2Aaddr	= 0x000e	; Timer/Counter2 Compare Match A
                                 .equ	OC2Baddr	= 0x0010	; Timer/Counter2 Compare Match A
                                 .equ	OVF2addr	= 0x0012	; Timer/Counter2 Overflow
                                 .equ	ICP1addr	= 0x0014	; Timer/Counter1 Capture Event
                                 .equ	OC1Aaddr	= 0x0016	; Timer/Counter1 Compare Match A
                                 .equ	OC1Baddr	= 0x0018	; Timer/Counter1 Compare Match B
                                 .equ	OVF1addr	= 0x001a	; Timer/Counter1 Overflow
                                 .equ	OC0Aaddr	= 0x001c	; TimerCounter0 Compare Match A
                                 .equ	OC0Baddr	= 0x001e	; TimerCounter0 Compare Match B
                                 .equ	OVF0addr	= 0x0020	; Timer/Couner0 Overflow
                                 .equ	SPIaddr	= 0x0022	; SPI Serial Transfer Complete
                                 .equ	URXCaddr	= 0x0024	; USART Rx Complete
                                 .equ	UDREaddr	= 0x0026	; USART, Data Register Empty
                                 .equ	UTXCaddr	= 0x0028	; USART Tx Complete
                                 .equ	ADCCaddr	= 0x002a	; ADC Conversion Complete
                                 .equ	ERDYaddr	= 0x002c	; EEPROM Ready
                                 .equ	ACIaddr	= 0x002e	; Analog Comparator
                                 .equ	TWIaddr	= 0x0030	; Two-wire Serial Interface
                                 .equ	SPMRaddr	= 0x0032	; Store Program Memory Read
                                 
                                 .equ	INT_VECTORS_SIZE	= 52	; size in words
                                 
                                 #endif  /* _M328PDEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 
                                 ; CENG209F19_Lab01.asm
                                 ;
                                 ; Created: 9/5/2019 11:59:24 AM
                                 ; Author : n01283714 (Jaivkumar Shah)
                                 ;
                                 ;
                                 ; CEN209L01.asm
                                 ;
                                 
                                 ; Constants
                                 	.equ	CLOSED	= 0
                                 	.equ	OPEN	= 1
                                 	.equ	ON		= 1
                                 	.equ	OFF		= 0
                                 	.equ	YES		= 1
                                 	.equ	NO		= 0
                                 	.equ	JCTR	= 125	; Joystick centre value
                                 
                                 ; States
                                 	.equ	STARTS		= 0
                                 	.equ	IDLES		= 1
                                 	.equ	DATAS		= 2
                                 	.equ	COOKS		= 3
                                 	.equ	SUSPENDS	= 4
                                 
                                 
                                 
                                 ; Port Pins
                                 	.equ	LIGHT	= 7		; Door Light WHITE LED PORTD pin 7
                                 	.equ	TTABLE	= 6		; Turntable PORTD pin 6 PWM
                                 	.equ	BEEPER	= 5		; Beeper PORTD pin 5
                                 	.equ	CANCEL	= 4		; Cancel switch PORTD pin 4
                                 	.equ	DOOR	= 3		; Door latching switch PORTD pin 3
                                 	.equ	STSP	= 2		; Start/Stop switch PORTD pin 2
                                 	.equ	HEATER	= 0		; Heater RED LED PORTB pin 0
                                 
                                 ; Global variables
                                 		.dseg
                                 
000100                           cstate:		.byte	1		; Current State
000101                           inputs: 		.byte	1		; Current input settings
000102                           joyx:			.byte	1		; Joystick x-axis
000103                           joyy:			.byte	1		; Joystick y-axis
000104                           joys:			.byte	1		; Joystick status 0 - not centred, 1 - centred.
000105                           seconds:		.byte	2		; Cook time in seconds 16-bit
000107                           sec1:			.byte	1		; minor tick time (100 ms)
000108                           tascii:		.byte	8		
                                 
                                 
                                 
                                 	.cseg
                                 	.org		0x0000
000000 940c 030b                 	jmp			start
                                 
                                 ;	Start after interrupt vector table
                                 	.org	0xF6
                                 
                                 	.include "iopins.asm"
                                 
                                  * iopins.asm
                                  *
                                  *  Created: 9/12/2019 12:04:56 PM
                                  *   Author: n01283714
                                  */ 
                                 ; Port Initialization
                                 initPorts:
0000f6 b18a                      	in		r24,DDRD		; Get the contents of DDRD
0000f7 6e80                      	ori		r24,0b11100000	; Set Port D pins 5,6,7 to outputs
0000f8 b98a                      	out		DDRD,r24
0000f9 b184                      	in		r24,DDRB		; Get the contents of DDRB
0000fa 6083                      	ori		r24,0b00000011	; Set Port B pins 0,1 to output
0000fb b984                      	out		DDRB,r24
0000fc b18a                      	in		r24,DDRD
0000fd 7e83                      	andi	r24,0b11100011	; Set Port D pins 2,3,4 to inputs
0000fe b98a                      	out		DDRD,r24
0000ff b18b                      	in		r24,PORTD		; Pull pins 2,3,4 high
000100 618c                      	ori		r24,0b00011100
000101 b98b                      	out		PORTD,r24
                                 	; Timer0 PWM Setup
                                 	; TCCR0A - Timer/Counter Control Register A
                                 	; Phase Correct PWM = WGM02-0,WGM01-0,WGM00 1, PWM TOP - 0xFF, Updates OCRx at TOP, TOV flag Set on Bottom
                                 	; Compare Output Mode = COM0A1-1,COM0A0-0
000102 e801                      	ldi	r16,(1<<COM0A1) |(1<<WGM00) 
000103 bd04                      	out	TCCR0A,r16 ; to timer control port A
                                 
                                 	; TCCCR0B - Timer/Counter Control Register B
                                 	; Prescaler = 1024 - CS02-1,CS01-0,CS00-1, Frequency 61 Hz - 16 mHz/1024/256
000104 e005                      	ldi	r16,(1<<CS02) | (1<<CS00) 
000105 bd05                      	out	TCCR0B,r16
000106 e000                      	ldi	r16,0				; Load 0 count to initially turn off turntable
000107 bd07                      	out	OCR0A,r16
                                 
000108 9508                      	ret
                                 	.include "util.asm"
                                 
                                  * util.asm
                                  *
                                  *  Created: 9/12/2019 12:05:14 PM
                                  *   Author: n01283714
                                  */
                                 ; 100 ms Delay
                                  delay100ms:
000109 ef2f                      		ldi		r18, 0xFF	; 255	
00010a ee81                      		ldi		r24, 0xE1	; 255
00010b e094                      		ldi		r25, 0x04	;
                                 
                                 d100:
00010c 5021                      		subi		r18, 0x01	; 1
00010d 4080                      		sbci		r24, 0x00	; 0
00010e 4090                      		sbci		r25, 0x00	; 0
00010f f7e1                      		brne		d100
000110 9508                      		ret
                                 
                                 ; Packed BCD To ASCII
                                 ; Number to convert in r17
                                 ; Converted output in r17 (upper nibble),r18 (lower nibble)
                                 pBCDToASCII:
000111 2f21                      		mov		r18,r17
000112 702f                      		andi		r18,0b00001111
000113 6320                      		ori		r18,0b00110000
000114 9512                      		swap		r17
000115 701f                      		andi		r17,0b00001111
000116 6310                      		ori		r17,0b00110000
                                 
000117 9508                      		ret
                                 
                                 ; Byte To Hexadecimal ASCII
                                 ; Number to convert in r17
                                 ; Converted output in r17 (lowernibble),r18 (upper nibble)
                                 byteToHexASCII:
                                 
000118 2f21                      		mov		r18,r17
000119 701f                      		andi		r17,0b00001111
00011a e300                      		ldi		r16,0x30
00011b 301a                      		cpi		r17,0x0A
00011c f008                      		brlo		b1
00011d e307                      		ldi		r16,0x37
                                 
00011e 0f10                      b1:		add		r17,r16
00011f 9522                      		swap		r18
000120 702f                      		andi		r18,0b00001111
000121 e300                      		ldi		r16,0x30
000122 302a                      		cpi		r18,0x0A
000123 f008                      		brlo		b2
000124 e307                      		ldi		r16,0x37
                                 
000125 0f20                      b2:		add		r18,r16
                                 
000126 9508                      		ret
                                 
                                 ; 1 Second Delay
                                 delay1s:
000127 e440                      		ldi		r20,64
000128 ec58                      d1:		ldi		r21,200
000129 ef6a                      d2:		ldi		r22,250
00012a 0000                      d3:		nop
00012b 0000                      		nop
00012c 956a                      		dec		r22
00012d f7e1                      		brne		d3
00012e 955a                      		dec		r21
00012f f7c9                      		brne		d2
000130 954a                      		dec		r20
000131 f7b1                      		brne		d1
                                 	
000132 9508                      		ret
                                 
                                 ; Converts unsigned integer value of r17:r16 to ASCII string tascii[5]
                                 itoa_short:
000133 e8ea                      	ldi		zl,low(dectab*2)	; pointer to 10^x power compare value
000134 e0f2                      	ldi		zh,high(dectab*2)
000135 e0a8                      	ldi		xl,low(tascii)	; pointer to array to store string
000136 e0b1                      	ldi		xh,high(tascii)
                                 itoa_lext:
000137 e22f                      	ldi		r18,'0'-1		; (ASCII 0) -1
000138 9025                      	lpm		r2,z+			; load 10^x word, point to next
000139 9035                      	lpm		r3,z+
                                 itoa_lint:
00013a 9523                      	inc		r18			; start with '0' ASCII
00013b 1902                      	sub		r16,r2			; (## - 10^x
00013c 0913                      	sbc		r17,r3
00013d f7e0                      	brsh		itoa_lint
00013e 0d02                      	add		r16,r2			; if negative reconstruct
00013f 1d13                      	adc		r17,r3
000140 932d                      	st		x+,r18			; save 1/10^x count, point to next location to save
000141 95c8                      	lpm				; read last ZX pointed at from 10^x table in (r0)
000142 2000                      	tst		r0                  ; LAST WORD YET?=0x00
000143 f799                      	brne		itoa_lext
000144 9508                      	ret
                                 
000145 2710
000146 03e8
000147 0064
000148 000a
000149 0001
00014a 0000                      dectab:	.dw	10000,1000,100,10,1,0
                                 
                                 ; Divide two 16-bit numbers
                                 .def ANSL = R0		;To hold low-byte of answer
                                 .def ANSH = R1		;To hold high-byte of answer     
                                 .def REML = R2		;To hold low-byte of remainder
                                 .def REMH = R3		;To hold high-byte of remainder
                                 .def   AL = R16		;To hold low-byte of dividend
                                 .def   AH = R17		;To hold high-byte of dividend
                                 .def   BL = R18		;To hold low-byte of divisor
                                 .def   BH = R19		;To hold high-byte of divisor   
                                 .def  C16 = R20		;Bit Counter
                                 
                                 div1616:
00014b 0108                      	movw	ANSH:ANSL,AH:AL	;Copy dividend into answer
00014c e141                      	ldi		C16,17			;Load bit counter
00014d 1822                      	sub		REML,REML		;Clear Remainder and Carry
00014e 2433                      	clr		REMH          
                                 dloop:
00014f 1c00                      	rol		ANSL			;Shift the answer to the left
000150 1c11                      	rol		ANSH          
000151 954a                      	dec		C16				;Decrement Counter
000152 f059                      	breq	ddone			;Exit if sixteen bits done
000153 1c22                      	rol		REML			;Shift remainder to the left
000154 1c33                      	rol		REMH          
000155 1a22                      	sub		REML,BL			;Try to subtract divisor from remainder
000156 0a33                      	sbc		REMH,BH
000157 f420                      	brcc	skip			;If the result was negative then
000158 0e22                      	add		REML,BL			;reverse the subtraction to try again
000159 1e33                      	adc		REMH,BH
00015a 9488                      	clc						;Clear Carry Flag so zero shifted into A 
00015b cff3                      	rjmp	dloop			;Loop Back
                                 skip:
00015c 9408                      	sec						;Set Carry Flag to be shifted into A
00015d cff1                      	rjmp	dloop
                                 ddone:
00015e 9508                      	ret
                                 
                                 ; Divide two 8-bit numbers
                                 ;
                                 ; r0 holds answer
                                 ; r2 holds remainder
                                 ; r16 holds dividend
                                 ; r18 holds divisor
                                 ; r20 Bit Counter
                                 ;
                                 div88:
00015f e049                      	ldi		r20,9	; Load bit counter
000160 1822                      	sub		r2,r2	; Clear remainder and Carry
000161 2e00                      	mov		r0,r16	; Copy dividend to answer
                                 loopd8:
000162 1c00                      	rol		r0		; Shift answer to left
000163 954a                      	dec		r20		; Decrement counter
000164 f041                      	breq	doned8	; Exit if eight bits done
000165 1c22                      	rol		r2		; Shift remainder to the left
000166 1a22                      	sub		r2,r18	; Try to subtract the divsor from remainder
000167 f418                      	brcc	skipd8	; If result was negative then
000168 0e22                      	add		r2,r18	; reverse subtraction to try again
000169 9488                      	clc				; Clear Carry flag so zero shifted into A
00016a cff7                      	rjmp	loopd8
                                 skipd8:
00016b 9408                      	sec			; Set Carry flag to be shifted into A
00016c cff5                      	rjmp	loopd8
                                 doned8:
                                 	.include "serialio.asm"
00016d 9508                      
                                  * serialio.asm
                                  *
                                  *  Created: 10/3/2019 12:17:05 PM
                                  *   Author: n01283714
                                  */ 
                                 ; Initializes the USART0 to operate in asynchronous mode with baud rate set to
                                 ; 9600. The USART0 is configured to transmit and receive 8-bit data.
                                 initUSART0:
00016e e040                      	ldi		r20,0			; set baud rate to 9600 with fOSC = 16MHz
00016f 9340 00c5                 	sts		UBRR0H,r20		; 	"
000171 e647                      	ldi		r20,0x67		; 	"
000172 9340 00c4                 	sts		UBRR0L,r20		; 	"
000174 e148                      	ldi		r20,0x18		; enable transmitter (TXEN), receiver (RXEN), 8-bit data
000175 9340 00c1                 	sts		UCSR0B,r20		; 	"
000177 e046                      	ldi		r20,0x06		; asynchronous USART, disable parity
000178 9340 00c2                 	sts		UCSR0C,r20		; 	"
00017a 9508                      	ret
                                 
                                 ; Outputs the character passed in r16 to MEGA device USART0 
                                 ; using the polling method. The character is less than 9 bits.
                                 putchUSART0:
00017b 9140 00c0                 	lds		r20,UCSR0A		; make sure data register is empty before
00017d ff45                      	sbrs	r20,UDRE0		; outputting the character
00017e 940c 017b                 	jmp		putchUSART0		; 	"
000180 9300 00c6                 	sts		UDR0,r16		; output the character (less than 9 bits)
000182 9508                      	ret
                                 
                                 
                                 ; Reads a character from the USART0 module of the MEGA device using 
                                 ; the polling method. The character is returned in r22. 
                                 getchUSART0:
000183 9140 00c0                 	lds		r20,UCSR0A		; is there any data to be read?
000185 ff47                      	sbrs	r20,RXC0		; 	"
000186 cffc                      	rjmp	getchUSART0		; 	"
000187 9160 00c6                 	lds		r22,UDR0		; fetch the received character
000189 9508                      	ret
                                 
                                 ; Outputs a string pointed to by Z to USART0. The string is stored in
                                 ; program memory or data memory. r16 indicates if the string is in program memory (=1)
                                 ; or data memory (=0). 
                                 putsUSART0:
00018a 3001                      	cpi		r16,1			; is string in program memory?
00018b f031                      	breq	pstr			; 	"
                                 dstr:
00018c 9101                      	ld		r16,z+			; string is in data memory
00018d 3000                      	cpi		r16,0
00018e f049                      	breq	done			; reach the end of string?
00018f dfeb                      	rcall	putchUSART0		; output the next character
000190 940c 018c                 	jmp		dstr
                                 pstr:
000192 9105                      	lpm		r16,z+			; string is in program memory
000193 3000                      	cpi		r16,0
000194 f019                      	breq	done			; reach the end of string?
000195 dfe5                      	rcall	putchUSART0		; output the next character
000196 940c 0192                 	jmp		pstr
                                 done:
000198 9508                      	ret
                                 ; Reads a string from the USART0 of the MEGA device using the polling
                                 ; method by continuously calling putchUSART0 until the carriage return (CR) character is
                                 ; encountered.  Register X points to the buffer that holds the received string.
                                 getsUSART0:
                                 	.equ	enter = 0x0D
                                 ragain:	
000199 dfe9                      	rcall	getchUSART0
00019a 306d                      	cpi		r22,enter		; is it an enter character?
00019b f419                      	brne	cont
00019c e030                      	ldi		r19,0
00019d 933c                      	st		X,r19			; terminate the string with a NULL character
00019e 9508                      	ret
                                 cont:
00019f 936c                      	st		X,r22			; save the character in the buffer
0001a0 2f06                      	mov		r16,r22			; copy r22 to r16
0001a1 dfd9                      	rcall	putchUSART0		; echo the character to USART0 
0001a2 3068                      	cpi		r22,0x08		; is it a backspace character?
0001a3 f449                      	brne	notBS
0001a4 95aa                      	dec		XL			    ; decrement the X pointer
0001a5 40b0                      	sbci	XH,0			; 	"
0001a6 e200                      	ldi		r16,0x20		; output a space character
0001a7 940e 017b                 	call	putchUSART0 	; 	"
0001a9 e008                      	ldi		r16,0x08		; output a backspace character
0001aa dfd0                      	rcall	putchUSART0		; 	"
0001ab 940c 0199                 	jmp		ragain
                                 notBS:
0001ad 95a3                      	inc		XL			    ; increment X pointer
0001ae e040                      	ldi		r20,0			; 	"
0001af 1fb4                      	adc		XH,r20			; 	"
0001b0 cfe8                      	rjmp	ragain
0001b1 9508                      	ret
                                 
                                 newline:
0001b2 e00d                      	ldi		r16,0x0D
0001b3 940e 017b                 	call	putchUSART0
0001b5 e00a                      	ldi		r16,0x0A
0001b6 940e 017b                 	call	putchUSART0
                                 
                                 	.include "adc.asm"
0001b8 9508                      
                                  * adc.asm
                                  *
                                  *  Created: 10/10/2019 12:17:52 PM
                                  *   Author: n01283714
                                  */ 
                                 initADC:
0001b9 e480                      	ldi		r24,1<<REFS0			; Sets the REFS0 to 1 for 5V vref
0001ba 9380 007c                 	sts		ADMUX,r24
0001bc e887                      	ldi		r24,0x87				; Enable ADC and select clock/128
0001bd 9380 007a                 	sts		ADCSRA,r24
0001bf 9508                      	ret
                                 
                                 ; Channel to read in r24,value returned in r24,r25
                                 readADCch:
0001c0 e7ec                      	ldi		r30,ADMUX
0001c1 e0f0                      	ldi		r31,0x00
0001c2 8190                      	ld		r25,Z
0001c3 7087                      	andi	r24,0x07		; makes sure channel 0-7
0001c4 7f98                      	andi	r25,0xF8		; clears bottom 3 bits before OR
0001c5 2b89                      	or		r24,r25
0001c6 8380                      	st		Z,r24
0001c7 e7ea                      	ldi		r30,ADCSRA		; trigger the converstion.
0001c8 e0f0                      	ldi		r31,0x00
0001c9 8180                      	ld		r24,Z
0001ca 6480                      	ori		r24,0x40
0001cb 8380                      	st		Z,r24
                                 poll:
0001cc 8180                      	ld		r24,Z
0001cd fd86                      	sbrc	r24,6			; Loop until conversion complete
0001ce 940c 01cc                 	jmp		poll
0001d0 9180 0078                 	lds		r24,ADCL		; Read low and high byte
0001d2 9190 0079                 	lds		r25,ADCH
0001d4 9508                      	ret
                                 	.include "i2c.asm"
                                 
                                  * i2c.asm
                                  *
                                  *  Created: 10/31/2019 12:23:28 PM
                                  *   Author: n01283714
                                  */ 
                                 .equ F_SCL		= 100000	; I2C speed 100 KHz
                                 .equ TWISTART		= 0xA4		; Start (TWINT,TWSTA,TWEN)
                                 .equ TWISTOP		= 0x94		; Stop (TWINT,TWSTO,TWEN)
                                 .equ TWIACK		= 0xC4		; Return ACK to slave
                                 .equ TWINACK		= 0x84		; Don't ACK slave
                                 .equ TWISEND		= 0x84		; Send data (TWINT,TWEN)
                                 .equ TWIREADY		= TWCR & 0x80	; Ready when TWINT returns 1
                                 .equ TWISTATUS	= TWSR & 0xF8	; Returns value of status register
                                 ; I2C Initialization
                                 ; at 16 MHz, the SCL frequency will be 16/(16+2(TWBR)), assuming prescalar of 0.
                                 ; for 100KHz SCL, TWBR = ((F_CPU/F_SCL)-16)/2 = ((16/0.1)-16)/2 = 144/2 = 72.
                                 i2cInit:
0001d5 e050                      	ldi		r21,0
0001d6 9350 00b9                 	sts		TWSR,r21		; set prescaler bits to 0
0001d8 e458                      	ldi		r21,0x48		; 16 MHz CPU, 100 KHz TWI 72
0001d9 9350 00b8                 	sts		TWBR,r21
0001db e054                      	ldi		r21,(1<<TWEN)
0001dc 9350 00bc                 	sts		TWCR,r21		; Enable TWI
0001de 9508                      	ret
                                 ; Looks for device at specfied address passed in r23                                                     
                                 i2cDetect:
0001df ea44                      	ldi	r20,TWISTART		; Send Start
0001e0 9340 00bc                 	sts	TWCR,r20
0001e2 ebec                      	ldi	r30,TWCR
0001e3 e0f0                      	ldi	r31,0x00
                                 dt1:
0001e4 8140                      	ld	r20,Z
0001e5 2344                      	and	r20,r20
0001e6 f7ec                      	brge	dt1
0001e7 9370 00bb                 	sts	TWDR,r23
0001e9 e884                      	ldi	r24,TWISEND
0001ea 9380 00bc                 	sts	TWCR,r24
0001ec ebec                      	ldi	r30,TWCR
0001ed e0f0                      	ldi	r31,0x00
                                 dt2:	
0001ee 8180                      	ld	r24,Z
0001ef 2388                      	and	r24,r24
0001f0 f7ec                      	brge	dt2
0001f1 9140 00b9                 	lds	r20,TWSR
0001f3 7b48                      	andi	r20,TWISTATUS
0001f4 e081                      	ldi	r24,0x01
0001f5 3148                      	cpi	r20,0x18
0001f6 f009                      	breq	dt3
0001f7 e080                      	ldi	r24,0
                                 dt3:
0001f8 9508                      	ret
                                 ; I2C Start Address in r23
                                 i2cStart:
0001f9 940e 01df                 	call i2cDetect
0001fb 9508                      	ret
                                 ; I2C Stop
                                 i2cStop:
0001fc e984                      	ldi r24,TWISTOP
0001fd 9380 00bc                 	sts TWCR,r24
0001ff 9508                      	ret
                                 ; I2C Read
                                 ; Data returned in r27
                                 i2cRead:
000200 e854                      	ldi	r21,(1<<TWINT) | (1<<TWEN)
000201 9350 00bc                 	sts	TWCR,r21
                                 wait2:
000203 9150 00bc                 	lds	r21,TWCR		; Read control register
000205 ff57                      	sbrs	r21,TWINT		; Wait until ready
000206 cffc                      	rjmp	wait2
000207 91b0 00bb                 	lds	r27,TWDR		; Read data
000209 9508                      	ret
                                 
                                 ; reads data byte from slave into r24
                                 i2cReadACK:
00020a ec84                      	ldi	r24,TWIACK	; ack = read more data
00020b 9380 00bc                 	sts	TWCR,r24
00020d ebec                      	ldi	r30,TWCR
00020e e0f0                      	ldi	r31,0x00
                                 ra1:
00020f 8180                      	ld	r24,Z
000210 2388                      	and	r24,r24
000211 f7ec                      	brge	ra1
000212 9180 00bb                 	lds	r24,TWDR
000214 9508                      	ret
                                 
                                 ; reads data byte from slave into r24
                                 i2cReadNACK:
000215 e884                      	ldi	r24,TWINACK	; nack = not reading more data
000216 9380 00bc                 	sts	TWCR,r24
000218 ebec                      	ldi	r30,TWCR
000219 e0f0                      	ldi	r31,0x00
                                 rn1:
00021a 8180                      	ld	r24,Z
00021b 2388                      	and	r24,r24
00021c f7ec                      	brge	rn1
00021d 9180 00bb                 	lds	r24,TWDR
00021f 9508                      	ret
                                 
                                 ; I2C Write
                                 ; Data to write in r24
                                 i2cWrite:
000220 9380 00bb                 	sts	TWDR,r24	; Load data into TWDR register
000222 e884                      	ldi	r24,TWISEND
000223 9380 00bc                 	sts	TWCR,r24	; Configure control register to send TWDR contents.
000225 ebcc                      	ldi	r28,TWCR
000226 e0d0                      	ldi	r29,0x00
                                 wr1:
000227 8188                      	ld	r24,Y
000228 2388                      	and	r24,r24
000229 f7ec                      	brge	wr1
00022a 9140 00b9                 	lds	r20,TWSR
00022c e081                      	ldi	r24,0x01
00022d 3246                      	cpi	r20,0x26
00022e f409                      	brne	wr2
00022f e080                      	ldi	r24,0x00
                                 wr2:
000230 9508                      	ret
                                 ; I2C Write Register
                                 ; Bus Address in r23,Device Register in r25,Data in r22
                                 i2cWriteRegister:
000231 940e 01f9                 	call	i2cStart
000233 2f89                      	mov	r24,r25
000234 940e 0220                 	call	i2cWrite
000236 2f86                      	mov	r24,r22
000237 940e 0220                 	call	i2cWrite
000239 940e 01fc                 	call	i2cStop
00023b 9508                      	ret
                                 
                                 ; I2C Read Register
                                 ; Bus address in r23, Device register in r25,
                                 i2cReadRegister:
00023c 2f67                      	mov	r22,r23
00023d 940e 01f9                 	call	i2cStart
00023f 2f89                      	mov	r24,r25
000240 940e 0220                 	call	i2cWrite
000242 e071                      	ldi	r23,0x01	; Restart as a READ operation
000243 0f76                      	add	r23,r22
000244 940e 01f9                 	call	i2cStart
000246 940e 0215                 	call	i2cReadNACK
000248 2f68                      	mov	r22,r24
000249 940e 01fc                 	call	i2cStop
00024b 2f86                      	mov	r24,r22
00024c 9508                      	ret
                                 
                                 ; Write Multiple Bytes
                                 ; Bus Address in r23,Device Register in r25, Address Pointer r16,r17
                                 i2cWriteMulti:
00024d 940e 01f9                 	call	i2cStart
00024f 2f89                      	mov	r24,r25
000250 940e 0220                 	call	i2cWrite
000252 9720                      	sbiw	r28,0x00
000253 f039                      	breq	wm1
                                 wm2:
000254 01f8                      	movw	r30,r16	; Set address in Z
000255 9181                      	ld	r24,Z+		; Get data then increment Z
000256 018f                      	movw	r16,r30	; Save Z register
000257 940e 0220                 	call	i2cWrite	; Write data
000259 9721                      	sbiw	r28,0x01	; Decrement byte count
00025a f7c9                      	brne	wm2		; loop if not done
                                 wm1:
00025b 940e 01fc                 	call i2cStop
                                 	.include "rtcds1307.asm"
00025d 9508                      
                                  * rtcdc1307.asm
                                  *
                                  *  Created: 10/31/2019 12:30:01 PM
                                  *   Author: n01283714
                                  */ 
                                 .equ RTCADR           = 0xd0
                                 .equ SECONDS_REGISTER = 0x00
                                 .equ MINUTES_REGISTER = 0x01
                                 .equ HOURS_REGISTER	  = 0x02
                                 .equ DAYOFWK_REGISTER = 0x03
                                 .equ DAYS_REGISTER    = 0x04
                                 .equ MONTHS_REGISTER  = 0x05
                                 .equ YEARS_REGISTER   = 0x06
                                 .equ CONTROL_REGISTER = 0x07
                                 .equ RAM_BEGIN        = 0x08
                                 .equ RAM_END          = 0x3F
                                 
                                 ds1307Init:
00025e ed70                      	ldi		r23,RTCADR		; RTC Setup
00025f 940e 01f9                 	call	i2cStart
000261 ed70                      	ldi		r23,RTCADR		; Initialize DS1307
000262 e097                      	ldi		r25,CONTROL_REGISTER
000263 e060                      	ldi		r22,0x00
000264 940e 0231                 	call	i2cWriteRegister
000266 9508                      	ret
                                 
                                 ; r23 RTC Address, r25 ds1307 Register, Return Data r24
                                 ds1307GetDateTime:
000267 ed70                      	ldi		r23,RTCADR
000268 940e 023c                 	call	i2cReadRegister
00026a 9508                      	ret
                                 	.include "andisplay.asm"
                                 
                                  * andisplay.asm
                                  *
                                  *  Created: 11/21/2019 12:50:06 PM
                                  *   Author: n01283714
                                  */ 
                                 .equ ANI2CADR	= 0xe0
                                 .equ ANON		= 0x21
                                 .equ ANSTANDBY	= 0x20
                                 .equ ANDISPON	= 0x81
                                 .equ ANDISPOFF	= 0x80
                                 .equ ANBLINKON	= 0x85
                                 .equ ANBLINKOFF	= 0x81
                                 .equ ANDIM		= 0xe5
                                 .equ ANBLINKCMD	= 0x80
                                 .equ ANBLINKDISPON	= 0x01
                                 .equ ANBLINKROFF	= 0
                                 .equ ANBLINK2HZ	= 1
                                 .equ ANBLINK1HZ	= 2
                                 .equ ANBLINKHHZ	= 3
                                 .equ ANBRIGHTCMD	= 0xe0
                                 
                                  ;	Alphanumeric Display Initialization
                                 anInit:
00026b ee70                      	ldi		r23,ANI2CADR		; HT16K33 I2C Address
00026c 940e 01f9                 	call	i2cStart
00026e e281                      	ldi		r24,ANON
00026f 940e 0220                 	call	i2cWrite
000271 940e 01fc                 	call	i2cStop
000273 940e 01f9                 	call	i2cStart
000275 e881                      	ldi		r24,ANDISPON
000276 940e 0220                 	call	i2cWrite
000278 940e 01fc                 	call	i2cStop
00027a 940e 01f9                 	call	i2cStart
00027c ee85                      	ldi		r24,ANDIM
00027d 940e 0220                 	call	i2cWrite
00027f 940e 01fc                 	call	i2cStop
000281 e200                      	ldi		r16, ' '
000282 e010                      	ldi		r17,0
000283 940e 0292                 	call	anWriteDigit
000285 e200                      	ldi		r16, ' '
000286 e011                      	ldi		r17,1
000287 940e 0292                 	call	anWriteDigit
000289 e200                      	ldi		r16, ' '
00028a e012                      	ldi		r17,2
00028b 940e 0292                 	call	anWriteDigit
00028d e200                      	ldi		r16, ' '
00028e e013                      	ldi		r17,3
00028f 940e 0292                 	call	anWriteDigit
000291 9508                      	ret
                                 
                                 
                                 ;	Write Digit - ASCII Character
                                 ;	Character in r16, Digit in r17
                                 anWriteDigit:
000292 e5e6                      	ldi		ZL,LOW(alphatable*2)		; Low byte of alphatable address
000293 e0f5                      	ldi		ZH,HIGH(alphatable*2)	; High byte
000294 5200                      	subi	r16,' '
000295 0f00                      	lsl		r16
000296 0fe0                      	add		ZL,r16
000297 e000                      	ldi		r16,0
000298 1ff0                      	adc		ZH,r16
000299 9125                      	lpm		r18,Z+
00029a 9134                      	lpm		r19,Z
00029b ee70                      	ldi		r23,ANI2CADR	; HT16K33 I2C Address
00029c 940e 01f9                 	call	i2cStart
00029e 2f81                      	mov		r24,r17			; Get digit to write
00029f 0f88                      	add		r24,r24			; Set up digit register
0002a0 940e 0220                 	call	i2cWrite
0002a2 2f82                      	mov		r24,r18
0002a3 940e 0220                 	call	i2cWrite
0002a5 2f83                      	mov		r24,r19
0002a6 940e 0220                 	call	i2cWrite
0002a8 940e 01fc                 	call	i2cStop
0002aa 9508                      	ret
                                 
                                 alphatable:
0002ab 0000                      .dw 0b0000000000000000	; Blank  
0002ac 0006                      .dw 0b0000000000000110	; !
0002ad 0220                      .dw 0b0000001000100000	; "
0002ae 12ce                      .dw 0b0001001011001110	; #
0002af 12ed                      .dw 0b0001001011101101	; $
0002b0 0c24                      .dw 0b0000110000100100	; %
0002b1 235d                      .dw 0b0010001101011101	; &
0002b2 0400                      .dw 0b0000010000000000	; '
0002b3 2400                      .dw 0b0010010000000000	; (
0002b4 0900                      .dw 0b0000100100000000	; )
0002b5 3fc0                      .dw 0b0011111111000000	; *
0002b6 12c0                      .dw 0b0001001011000000	; +
0002b7 0800                      .dw 0b0000100000000000	; ,
0002b8 00c0                      .dw 0b0000000011000000	; -
0002b9 0000                      .dw 0b0000000000000000	; .
0002ba 0c00                      .dw 0b0000110000000000	; /
0002bb 003f                      .dw 0b0000000000111111	; 0
0002bc 0006                      .dw 0b0000000000000110	; 1
0002bd 00db                      .dw 0b0000000011011011	; 2
0002be 00cf                      .dw 0b0000000011001111	; 3
0002bf 00e6                      .dw 0b0000000011100110	; 4
0002c0 00ed                      .dw 0b0000000011101101	; 5
0002c1 00fd                      .dw 0b0000000011111101	; 6
0002c2 0007                      .dw 0b0000000000000111	; 7
0002c3 00ff                      .dw 0b0000000011111111	; 8
0002c4 00ef                      .dw 0b0000000011101111	; 9
0002c5 1200                      .dw 0b0001001000000000	; :
0002c6 0a00                      .dw 0b0000101000000000	; ;
0002c7 2400                      .dw 0b0010010000000000	; <
0002c8 00c8                      .dw 0b0000000011001000	; =
0002c9 0900                      .dw 0b0000100100000000	; >
0002ca 1083                      .dw 0b0001000010000011	; ?
0002cb 02bb                      .dw 0b0000001010111011	; @
0002cc 00f7                      .dw 0b0000000011110111	; A
0002cd 128f                      .dw 0b0001001010001111	; B
0002ce 0039                      .dw 0b0000000000111001	; C
0002cf 120f                      .dw 0b0001001000001111	; D
0002d0 00f9                      .dw 0b0000000011111001	; E
0002d1 0071                      .dw 0b0000000001110001	; F
0002d2 00bd                      .dw 0b0000000010111101	; G
0002d3 00f6                      .dw 0b0000000011110110	; H
0002d4 1200                      .dw 0b0001001000000000	; I
0002d5 001e                      .dw 0b0000000000011110	; J
0002d6 2470                      .dw 0b0010010001110000	; K
0002d7 0038                      .dw 0b0000000000111000	; L
0002d8 0536                      .dw 0b0000010100110110	; M
0002d9 2136                      .dw 0b0010000100110110	; N
0002da 003f                      .dw 0b0000000000111111	; O
0002db 00f3                      .dw 0b0000000011110011	; P
0002dc 203f                      .dw 0b0010000000111111	; Q
0002dd 20f3                      .dw 0b0010000011110011	; R
0002de 00ed                      .dw 0b0000000011101101	; S
0002df 1201                      .dw 0b0001001000000001	; T
0002e0 003e                      .dw 0b0000000000111110	; U
0002e1 0c30                      .dw 0b0000110000110000	; V
0002e2 2836                      .dw 0b0010100000110110	; W
0002e3 2d00                      .dw 0b0010110100000000	; X
0002e4 1500                      .dw 0b0001010100000000	; Y
0002e5 0c09                      .dw 0b0000110000001001	; Z
0002e6 0039                      .dw 0b0000000000111001	; [
0002e7 2100                      .dw 0b0010000100000000	; 
0002e8 000f                      .dw 0b0000000000001111	; ]
0002e9 0c03                      .dw 0b0000110000000011	; ^
0002ea 0008                      .dw 0b0000000000001000	; _
0002eb 0100                      .dw 0b0000000100000000	; `
0002ec 1058                      .dw 0b0001000001011000	; a
0002ed 2078                      .dw 0b0010000001111000	; b
0002ee 00d8                      .dw 0b0000000011011000	; c
0002ef 088e                      .dw 0b0000100010001110	; d
0002f0 0858                      .dw 0b0000100001011000	; e
0002f1 0071                      .dw 0b0000000001110001	; f
0002f2 048e                      .dw 0b0000010010001110	; g
0002f3 1070                      .dw 0b0001000001110000	; h
0002f4 1000                      .dw 0b0001000000000000	; i
0002f5 000e                      .dw 0b0000000000001110	; j
0002f6 3600                      .dw 0b0011011000000000	; k
0002f7 0030                      .dw 0b0000000000110000	; l
0002f8 10d4                      .dw 0b0001000011010100	; m
0002f9 1050                      .dw 0b0001000001010000	; n
0002fa 00dc                      .dw 0b0000000011011100	; o
0002fb 0170                      .dw 0b0000000101110000	; p
0002fc 0486                      .dw 0b0000010010000110	; q
0002fd 0050                      .dw 0b0000000001010000	; r
0002fe 2088                      .dw 0b0010000010001000	; s
0002ff 0078                      .dw 0b0000000001111000	; t
000300 001c                      .dw 0b0000000000011100	; u
000301 2004                      .dw 0b0010000000000100	; v
000302 2814                      .dw 0b0010100000010100	; w
000303 28c0                      .dw 0b0010100011000000	; x
000304 200c                      .dw 0b0010000000001100	; y
000305 0848                      .dw 0b0000100001001000	; z
000306 0949                      .dw 0b0000100101001001	; {
000307 1200                      .dw 0b0001001000000000	; |
000308 2489                      .dw 0b0010010010001001	; }
000309 0520                      .dw 0b0000010100100000	; ~
00030a 3fff                      .dw 0b0011111111111111	; All
                                 
                                 
                                 start:
00030b e008                      	ldi			r16,HIGH(RAMEND)	; Initialize the stack pointer
00030c bf0e                      	out			sph,r16
00030d ef0f                      	ldi			r16,LOW(RAMEND)
00030e bf0d                      	out			spl,r16
00030f 940e 00f6                 	call			initPorts
000311 940e 016e                 	call			initUSART0
000313 940e 01b9                 	call			initADC
000315 940e 01d5                 	call			i2cInit
000317 940e 025e                 	call			ds1307Init
000319 940e 026b                 	call			anInit
00031b 940c 0357                 	jmp			startstate
                                 
                                 	
                                 	
                                 ; Main Control Loop
                                 loop:	
00031d 940e 039b                 	call			updateTick			;Check the time
                                 
                                 
                                 ;	If Door Open jump to suspend
00031f 9b4b                      	sbis			PIND,DOOR	
000320 940c 0368                 	jmp			suspend
000322 985f                      	cbi			PORTD,LIGHT
                                 	
                                 
                                 ;	Cancel Key Pressed
000323 994c                      	sbic			PIND,CANCEL
000324 c003                      	rjmp			l1
000325 9a5d                      	sbi			PORTD,BEEPER
000326 940c 0340                 	jmp			idle
                                 
                                 ;	Start Stop Key Pressed 
                                 l1:
000328 9180 0100                 	lds			r24, cstate
00032a 994a                      	sbic			PIND,STSP
00032b 940c 0336                 	jmp			joy0
00032d 9a5d                      	sbi			PORTD,BEEPER
00032e 3083                      	cpi			r24,COOKS
00032f f1c1                      	breq			suspend
000330 3081                      	cpi			r24,IDLES
000331 f0e1                      	breq			cook
000332 3084                      	cpi			r24,SUSPENDS
000333 f0d1                      	breq			cook
000334 3080                      	cpi			r24,STARTS
000335 f0c1                      	breq			cook
                                 
                                 
                                 joy0:
000336 940e 03be                 	call			joystickinputs
000338 9180 0100                 	lds			r24,cstate
00033a 3083                      	cpi			r24,COOKS
00033b f309                      	breq			loop
00033c 3091                      	cpi			r25,1
00033d f2f9                      	breq			loop
00033e 940c 0371                 	jmp			dataentry
                                 	
                                 
                                 
                                 
                                 
                                 idle:							; idle state tasks
000340 e081                      	ldi		r24,IDLES			; Set state variable to Idle
000341 9380 0100                 	sts		cstate,r24			; Do idle state tasks
000343 9828                      	cbi		PORTB,HEATER
000344 985f                      	cbi		PORTD,LIGHT
                                 
000345 e000                      	ldi		r16,0				;turning off the turntable
000346 bd07                      	out		OCR0A,r16
                                 
000347 e080                      	ldi		r24,0
000348 9380 0105                 	sts		seconds,r24
00034a 9380 0106                 	sts		seconds+1,r24
00034c 940c 031d                 	jmp		loop
                                 
                                 
                                 cook:							; cook state tasks
00034e e083                      	ldi		r24,COOKS			; Set state variable to Cook
00034f 9380 0100                 	sts		cstate,r24			; Do cook state tasks
000351 9a28                      	sbi		PORTB,HEATER
000352 985f                      	cbi		PORTD,LIGHT
                                 
000353 e203                      	ldi		r16,0x23			;turn turntable on
000354 bd07                      	out		OCR0A,r16
                                 
000355 940c 031d                 	jmp		loop
                                 
                                 startstate:
000357 e080                      	ldi		r24,STARTS			
000358 9380 0100                 	sts		cstate,r24			
00035a e080                      	ldi		r24,0
00035b 9380 0107                 	sts		sec1,r24
                                 
00035d 9380 0106                 	sts		seconds+1,r24
00035f e080                      	ldi		r24,0
000360 9380 0105                 	sts		seconds,r24
                                 
000362 9828                      	cbi		PORTB,HEATER
000363 985f                      	cbi		PORTD,LIGHT
                                 
000364 e000                      	ldi		r16,0				;turn turntable off
000365 bd07                      	out		OCR0A,r16
                                 
000366 940c 031d                 	jmp		loop
                                 
                                 suspend:						; suspend state tasks
000368 e084                      	ldi		r24,SUSPENDS		; Set state variable to Suspend
000369 9380 0100                 	sts		cstate,r24			; Do suspend state tasks
00036b 9828                      	cbi		PORTB,HEATER
00036c 9a5f                      	sbi		PORTD,LIGHT
                                 
00036d e000                      	ldi		r16,0				;turn off turntable
00036e bd07                      	out		OCR0A,r16
                                 
00036f 940c 031d                 	jmp		loop
                                 
                                 
                                 ; Data Entry State
                                 dataentry:						; data entry state tasks
000371 e082                      	ldi		r24,DATAS			; Set state variable to Data Entry
000372 9380 0100                 	sts		cstate,r24
                                 
000374 9828                      	cbi		PORTB,HEATER		;turn off heater
000375 985f                      	cbi		PORTD,LIGHT			;turn off light
                                 
000376 e000                      	ldi		r16,0				;turn off turntable
000377 bd07                      	out		OCR0A,r16
                                 
000378 91a0 0105                 	lds		r26,seconds			; Get current cook time
00037a 91b0 0106                 	lds		r27,seconds+1
00037c 9150 0102                 	lds		r21,joyx
00037e 3857                      	cpi		r21,135				; Check for time increment
00037f f438                      	brsh		de1
000380 30b0                      	cpi		r27,0				; Check upper byte for 0
000381 f411                      	brne		de0
000382 30a0                      	cpi		r26,0				; Check lower byte for 0
000383 f021                      	breq		de2
                                 de0:
000384 971a                      	sbiw		r27:r26,10			; Decrement cook time by 10 seconds
000385 940c 0388                 	jmp		de2
                                 de1:
000387 961a                      	adiw		r27:r26,10			; Increment cook time by 10 seconds
                                 de2:
000388 93a0 0105                 	sts		seconds,r26			; Store time
00038a 93b0 0106                 	sts		seconds+1,r27
00038c 940e 03dd                 	call		displayState
00038e 940e 0127                 	call		delay1s
000390 940e 03be                 	call		joystickInputs
000392 9150 0104                 	lds		r21,joys
000394 3050                      	cpi		r21,0
000395 f2d9                      	breq		dataentry			; Do data entry until joystick centred
000396 e084                      	ldi		r24,SUSPENDS
000397 9380 0100                 	sts		cstate,r24
000399 940c 031d                 	jmp		loop
                                 
                                 
                                 
                                 
                                 ; Time Tasks
                                 updateTick:
00039b 940e 0109                 	call		delay100ms
00039d 985d                      	cbi		PORTD,BEEPER	; Turn off beeper
00039e 9160 0107                 	lds		r22,sec1		; Get minor tick time
0003a0 306a                      	cpi		r22,10			; 10 delays of 100 ms done?
0003a1 f4b9                      	brne		ut2
0003a2 e060                      	ldi		r22,0			; Reset minor tick
0003a3 9360 0107                 	sts		sec1,r22		; Do 1 second interval tasks
                                 
0003a5 9170 0100                 	lds		r23,cstate		; Get current state
0003a7 3073                      	cpi		r23,COOKS
0003a8 f471                      	brne		ut1
0003a9 91a0 0105                 	lds		r26,seconds		; Get current cook time
0003ab 91b0 0106                 	lds		r27,seconds+1
0003ad 95a3                      	inc		r26
0003ae 9711                      	sbiw		r27:r26,1		; Decrement cook time by 1 second
0003af f411                      	brne		ut3
0003b0 940c 0340                 	jmp		idle
                                 ut3:
0003b2 9711                      	sbiw		r27:r26,1		; Decrement/store cook time
0003b3 93a0 0105                 	sts		seconds,r26
0003b5 93b0 0106                 	sts		seconds+1,r27
                                 ut1:
0003b7 940e 03dd                 	call		displayState
                                 ut2:
0003b9 9160 0107                 	lds		r22,sec1
0003bb 9563                      	inc		r22
0003bc 9360 0107                 	sts		sec1,r22
                                 
                                 ; Save Most Significant 8 bits of Joystick X,Y
                                 joystickInputs:
0003be e080                      	ldi		r24,0x00		; Read ch 0 Joystick Y
0003bf 940e 01c0                 	call		readADCch
0003c1 9592                      	swap		r25
0003c2 0f99                      	lsl		r25
0003c3 0f99                      	lsl		r25
0003c4 9586                      	lsr		r24
0003c5 9586                      	lsr		r24
0003c6 2b89                      	or		r24,r25
0003c7 9380 0103                 	sts		joyy,r24
0003c9 e081                      	ldi		r24,0x01		; Read ch 1 Joystick X
0003ca 940e 01c0                 	call		readADCch
0003cc 9592                      	swap		r25
0003cd 0f99                      	lsl		r25
0003ce 0f99                      	lsl		r25
0003cf 9586                      	lsr		r24
0003d0 9586                      	lsr		r24
0003d1 2b89                      	or		r24,r25
0003d2 9380 0102                 	sts		joyx,r24
0003d4 e090                      	ldi		r25,0			; Not centred
0003d5 3783                      	cpi		r24,115
0003d6 f018                      	brlo		ncx
0003d7 3887                      	cpi		r24,135
0003d8 f408                      	brsh		ncx
0003d9 e091                      	ldi		r25,1			; Centred
                                 ncx:
0003da 9390 0104                 	sts		joys,r25
0003dc 9508                      ret
                                 	
                                 
                                 displayState:
0003dd 940e 01b2                 	call		newline
0003df efe8                      	ldi		ZL,LOW(msg1<<1)
0003e0 e0f8                      	ldi		ZH,HIGH(msg1<<1)
0003e1 e001                      	ldi		r16,1
0003e2 940e 018a                 	call		putsUSART0
                                 
0003e4 940e 03f8                 	call		displayTOD
                                 	
0003e6 e0e0                      	ldi		ZL,LOW(msg2<<1)
0003e7 e0f9                      	ldi		ZH,HIGH(msg2<<1)
0003e8 e001                      	ldi		r16,1
0003e9 940e 018a                 	call		putsUSART0
                                 
0003eb 940e 043a                 	call   	 displayCookTime
                                 
                                 	
0003ed e0ee                      	ldi		ZL,LOW(msg3<<1)
0003ee e0f9                      	ldi		ZH,HIGH(msg3<<1)
0003ef e001                      	ldi		r16,1
0003f0 940e 018a                 	call		putsUSART0
                                 
0003f2 9100 0100                 	lds		r16,cstate
0003f4 6300                      	ori		r16,0x30
0003f5 940e 017b                 	call		putchUSART0
                                 
0003f7 9508                      	ret
                                 
                                 
                                 
                                 
                                 displayTOD:
                                 
0003f8 e092                      	ldi		r25,HOURS_REGISTER
0003f9 940e 0267                 	call		ds1307GetDateTime
                                 
0003fb 2f18                      	mov		r17, r24
0003fc 940e 0111                 	call		pBCDToASCII
0003fe 2f01                      	mov		r16,r17
0003ff 940e 017b                 	call		putchUSART0
000401 2f02                      	mov		r16,r18
000402 940e 017b                 	call		putchUSART0
                                 
000404 e30a                      	ldi		r16,':'
000405 940e 017b                 	call		putchUSART0
                                 
000407 e091                      	ldi		r25,MINUTES_REGISTER
000408 940e 0267                 	call		ds1307GetDateTime
                                 
00040a 2f18                      	mov		r17,r24
00040b 940e 0111                 	call		pBCDToASCII
00040d 2f01                      	mov		r16,r17
00040e 940e 017b                 	call		putchUSART0
000410 2f02                      	mov		r16,r18
000411 940e 017b                 	call		putchUSART0
                                 
000413 9180 0100                 	lds		r24,cstate	;don't do TOD if in cooks
000415 3083                      	cpi		r24,COOKS	;suspends or datas
000416 f111                      	breq		return
000417 3084                      	cpi		r24,SUSPENDS
000418 f101                      	breq		return
000419 3082                      	cpi		r24,DATAS
00041a f0f1                      	breq		return
                                 
                                 	;send to display
00041b e092                      	ldi		r25,HOURS_REGISTER	;get hour time
00041c 940e 0267                 	call		ds1307GetDateTime
00041e 2f18                      	mov		r17,r24
00041f 940e 0111                 	call		pBCDToASCII
000421 2f01                      	mov		r16,r17
000422 2ee2                      	mov		r14,r18
000423 e010                      	ldi		r17,0
000424 940e 0292                 	call		anWriteDigit
000426 2d0e                      	mov		r16,r14
000427 e011                      	ldi		r17,1
000428 940e 0292                 	call		anWriteDigit
                                 
00042a e091                      	ldi		r25,MINUTES_REGISTER	;get minute time
00042b 940e 0267                 	call		ds1307GetDateTime
00042d 2f18                      	mov		r17,r24
00042e 940e 0111                 	call		pBCDToASCII
000430 2f01                      	mov		r16,r17
000431 2ee2                      	mov		r14,r18
000432 e012                      	ldi		r17,2
000433 940e 0292                 	call		anWriteDigit
000435 2d0e                      	mov		r16,r14
000436 e013                      	ldi		r17,3
000437 940e 0292                 	call		anWriteDigit
                                 
                                 return:
000439 9508                      	ret
                                 
                                 displayCookTime:
                                 
00043a 9100 0105                 	lds		r16,seconds
00043c 9110 0106                 	lds		r17,seconds+1
00043e 940e 0133                 	call		itoa_short
                                 
000440 e080                      	ldi		r24,0
000441 9380 010d                 	sts		tascii+5,r24
000443 9380 010e                 	sts		tascii+6,r24
000445 9380 010f                 	sts		tascii+7,r24
                                 
000447 e0e8                      	ldi		ZL,LOW(tascii)
000448 e0f1                      	ldi		ZH,HIGH(tascii)
000449 e000                      	ldi		r16,0
00044a 940e 018a                 	call		putsUSART0
                                 
                                 	;only output to display if in COOKS,
                                 	;SUSPENDS,DATAS
00044c 9180 0100                 	lds		r24,cstate
00044e 3083                      	cpi		r24,COOKS
00044f f029                      	breq		display
000450 3084                      	cpi		r24,SUSPENDS
000451 f019                      	breq		display
000452 3082                      	cpi		r24,DATAS
000453 f009                      	breq		display
                                 
000454 9508                      	ret
                                 
                                 
                                 	;send to display
                                 display:
000455 9100 0105                 	lds		r16,seconds		;hold low-byte as divident
000457 9110 0106                 	lds		r17,seconds+1	;hold high-byte as divident
000459 e32c                      	ldi		r18,60			;divide by 60 (low byte)
00045a e030                      	ldi		r19,0			;divide by 60 (high byte)
00045b 940e 014b                 	call		div1616
00045d 2ca0                      	mov		r10,r0			;hold low-byte answer (mm)
00045e 2cb2                      	mov		r11,r2			;hold low-byte remainder (ss)
                                 
00045f 2d0a                      	mov		r16,r10			;dividing minutes
000460 e02a                      	ldi		r18,10			;by 10
000461 940e 015f                 	call		div88
                                 
000463 e300                      	ldi		r16,'0'
000464 0d00                      	add		r16,r0
000465 e010                      	ldi		r17,0
000466 940e 0292                 	call		anWriteDigit	;writing 10's minutes digit
                                 
000468 e300                      	ldi		r16,'0'
000469 0d02                      	add		r16,r2
00046a e011                      	ldi		r17,1
00046b 940e 0292                 	call		anWriteDigit	;writing 1's minutes digit
                                 
00046d 2d0b                      	mov		r16,r11			;divide seconds
00046e e02a                      	ldi		r18,10			;by 10
00046f 940e 015f                 	call		div88
                                 	
000471 e300                      	ldi		r16,'0'
000472 0d00                      	add		r16,r0
000473 e012                      	ldi		r17,2
000474 940e 0292                 	call		anWriteDigit	;writing 10's seconds digit
                                 
000476 e300                      	ldi		r16,'0'
000477 0d02                      	add		r16,r2
000478 e013                      	ldi		r17,3
000479 940e 0292                 	call		anWriteDigit	;writing 1's seconds digit
                                 
                                 
00047b 9508                      	ret
                                 
                                 ;test message
00047c 6954
00047d 656d
00047e 203a
00047f 0000                      msg1:	.db "Time: ",0,0
000480 4320
000481 6f6f
000482 206b
000483 6954
000484 656d
000485 203a
000486 0000                      msg2:	.db " Cook Time: ",0,0
000487 5320
000488 6174
000489 6574
00048a 203a
00048b 0000                      msg3:	.db " State: ",0,0


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

"ATmega328P" register use summary:
x  :   3 y  :   1 z  :  16 r0 :   8 r1 :   2 r2 :  16 r3 :   7 r4 :   0 
r5 :   0 r6 :   0 r7 :   0 r8 :   0 r9 :   0 r10:   2 r11:   2 r12:   0 
r13:   0 r14:   4 r15:   0 r16:  79 r17:  34 r18:  26 r19:   7 r20:  30 
r21:  16 r22:  20 r23:  11 r24: 126 r25:  26 r26:  13 r27:  13 r28:   3 
r29:   1 r30:  15 r31:  13 
Registers used: 26 out of 35 (74.3%)

"ATmega328P" instruction use summary:
.lds  :   0 .sts  :   0 adc   :   4 add   :  12 adiw  :   1 and   :   5 
andi  :   8 asr   :   0 bclr  :   0 bld   :   0 brbc  :   0 brbs  :   0 
brcc  :   2 brcs  :   0 break :   0 breq  :  21 brge  :   5 brhc  :   0 
brhs  :   0 brid  :   0 brie  :   0 brlo  :   3 brlt  :   0 brmi  :   0 
brne  :  13 brpl  :   0 brsh  :   3 brtc  :   0 brts  :   0 brvc  :   0 
brvs  :   0 bset  :   0 bst   :   0 call  :  86 cbi   :  10 cbr   :   0 
clc   :   2 clh   :   0 cli   :   0 cln   :   0 clr   :   1 cls   :   0 
clt   :   0 clv   :   0 clz   :   0 com   :   0 cp    :   0 cpc   :   0 
cpi   :  29 cpse  :   0 dec   :   6 eor   :   0 fmul  :   0 fmuls :   0 
fmulsu:   0 icall :   0 ijmp  :   0 in    :   4 inc   :   4 jmp   :  18 
ld    :  10 ldd   :   0 ldi   : 137 lds   :  29 lpm   :   9 lsl   :   5 
lsr   :   4 mov   :  32 movw  :   3 mul   :   0 muls  :   0 mulsu :   0 
neg   :   0 nop   :   2 or    :   3 ori   :   7 out   :  14 pop   :   0 
push  :   0 rcall :   5 ret   :  37 reti  :   0 rjmp  :   8 rol   :   6 
ror   :   0 sbc   :   2 sbci  :   3 sbi   :   4 sbic  :   2 sbis  :   1 
sbiw  :   5 sbr   :   0 sbrc  :   1 sbrs  :   3 sec   :   2 seh   :   0 
sei   :   0 sen   :   0 ser   :   0 ses   :   0 set   :   0 sev   :   0 
sez   :   0 sleep :   0 spm   :   0 st    :   5 std   :   0 sts   :  42 
sub   :   5 subi  :   2 swap  :   4 tst   :   1 wdr   :   0 
Instructions used: 51 out of 113 (45.1%)

"ATmega328P" memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000918   1604    236   1840   32768   5.6%
[.dseg] 0x000100 0x000110      0     16     16    2048   0.8%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 0 warnings
